{
	"name": "DF_SCD2_I2025_SRangan1",
	"properties": {
		"folder": {
			"name": "TDSG Day 5 Training"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "empmastersource"
				},
				{
					"dataset": {
						"referenceName": "DS_Source_I2025_SRangan1",
						"type": "DatasetReference"
					},
					"name": "empmasterTarget"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Source_I2025_SRangan1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "castSource"
				},
				{
					"name": "tgtcast"
				},
				{
					"name": "leftouterjoin"
				},
				{
					"name": "nullhandlingsrc"
				},
				{
					"name": "split1"
				},
				{
					"name": "tgtselect"
				},
				{
					"name": "dcaudit"
				},
				{
					"name": "alterRowUpdate"
				},
				{
					"name": "dcauditt"
				},
				{
					"name": "selectTarget"
				},
				{
					"name": "selectSource"
				},
				{
					"name": "selectSrc"
				},
				{
					"name": "dcauditFlag"
				},
				{
					"name": "split2"
				},
				{
					"name": "unionUpdate"
				},
				{
					"name": "unionInsert"
				},
				{
					"name": "unionExisting"
				},
				{
					"name": "selectTgt"
				},
				{
					"name": "auditFlag"
				},
				{
					"name": "sortEmpID"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmployeeID as string,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as string,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as string,",
				"          HireDate as string,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as string,",
				"          EndDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> empmastersource",
				"source(output(",
				"          EmployeeID as string,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as date,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as integer,",
				"          HireDate as date,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as date,",
				"          EndDate as string,",
				"          createBy as string,",
				"          time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> empmasterTarget",
				"empmastersource derive(EmployeeID = toInteger(EmployeeID),",
				"          DateOfBirth = toDate(DateOfBirth, 'dd-MM-yyyy'),",
				"          Salary = toInteger(Salary),",
				"          HireDate = toDate(HireDate, 'dd-MM-yyyy'),",
				"          EffectiveDate = toDate(EffectiveDate, 'dd-MM-yyyy'),",
				"          EndDate = toTimestamp(EndDate, 'yyyy-MM-dd HH:mm:ss')) ~> castSource",
				"empmasterTarget derive(EmployeeID = toInteger(EmployeeID),",
				"          EndDate = toTimestamp(EndDate, 'yyyy-MM-dd HH:mm:ss')) ~> tgtcast",
				"nullhandlingsrc, tgtselect join(EmployeeID == {t.EmployeeID},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftouterjoin",
				"castSource derive(each(match(type=='Integer'), $$ = iifNull($#, -1)),",
				"          each(match(type=='Float'), $$ = iifNull($#, 0))) ~> nullhandlingsrc",
				"leftouterjoin split(isNull({t.EmployeeID}),",
				"     disjoint: false) ~> split1@(insert, update)",
				"tgtcast select(mapColumn(",
				"          {t.EmployeeID} = EmployeeID,",
				"          {t.Name} = Name,",
				"          {t.Gender} = Gender,",
				"          {t.DateOfBirth} = DateOfBirth,",
				"          {t.Department} = Department,",
				"          {t.JobTitle} = JobTitle,",
				"          {t.Salary} = Salary,",
				"          {t.HireDate} = HireDate,",
				"          {t.Address} = Address,",
				"          {t.Email} = Email,",
				"          {t.PhoneNumber} = PhoneNumber,",
				"          {t.MaritalStatus} = MaritalStatus,",
				"          {t.EffectiveDate} = EffectiveDate,",
				"          {t.EndDate} = EndDate,",
				"          {t.createBy} = createBy,",
				"          {t.time} = time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> tgtselect",
				"split1@insert derive({t.createBy} = 'I2025_SRangan1',",
				"          {t.time} = currentTimestamp(),",
				"          flag = 'active') ~> dcaudit",
				"split2@updated alterRow(updateIf((EmployeeID=={t.EmployeeID})&&(JobTitle!={t.JobTitle}||Salary!={t.Salary}))) ~> alterRowUpdate",
				"selectTarget derive(modifiedby = 'I2025_SRangan1',",
				"          modified_date = currentTimestamp(),",
				"          flag = 'deactive',",
				"          EndDate = currentTimestamp()) ~> dcauditt",
				"alterRowUpdate select(mapColumn(",
				"          EmployeeID,",
				"          Name = {t.Name},",
				"          Gender = {t.Gender},",
				"          DateOfBirth = {t.DateOfBirth},",
				"          Department = {t.Department},",
				"          JobTitle,",
				"          Salary,",
				"          HireDate = {t.HireDate},",
				"          Address = {t.Address},",
				"          Email = {t.Email},",
				"          PhoneNumber = {t.PhoneNumber},",
				"          MaritalStatus = {t.MaritalStatus},",
				"          EffectiveDate = {t.EffectiveDate},",
				"          EndDate = {t.EndDate},",
				"          createBy = {t.createBy},",
				"          time = {t.time}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectTarget",
				"dcaudit select(mapColumn(",
				"          EmployeeID,",
				"          Name,",
				"          Gender,",
				"          DateOfBirth,",
				"          Department,",
				"          JobTitle,",
				"          Salary,",
				"          HireDate,",
				"          Address,",
				"          Email,",
				"          PhoneNumber,",
				"          MaritalStatus,",
				"          EffectiveDate,",
				"          EndDate,",
				"          createBy = {t.createBy},",
				"          time = {t.time},",
				"          flag",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectSource",
				"alterRowUpdate select(mapColumn(",
				"          EmployeeID,",
				"          Name,",
				"          Gender,",
				"          DateOfBirth,",
				"          Department,",
				"          JobTitle,",
				"          Salary,",
				"          HireDate,",
				"          Address,",
				"          Email,",
				"          PhoneNumber,",
				"          MaritalStatus,",
				"          EffectiveDate,",
				"          EndDate,",
				"          createBy = {t.createBy},",
				"          time = {t.time}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectSrc",
				"selectSrc derive(flag = 'active') ~> dcauditFlag",
				"split1@update split((EmployeeID=={t.EmployeeID})&&(JobTitle!={t.JobTitle}||Salary!={t.Salary}),",
				"     disjoint: false) ~> split2@(updated, existing)",
				"dcauditFlag, dcauditt union(byName: true)~> unionUpdate",
				"unionUpdate, selectSource union(byName: true)~> unionInsert",
				"unionInsert, auditFlag union(byName: true)~> unionExisting",
				"split2@existing select(mapColumn(",
				"          EmployeeID = {t.EmployeeID},",
				"          Name = {t.Name},",
				"          Gender = {t.Gender},",
				"          DateOfBirth = {t.DateOfBirth},",
				"          Department = {t.Department},",
				"          JobTitle = {t.JobTitle},",
				"          Salary = {t.Salary},",
				"          HireDate = {t.HireDate},",
				"          Address = {t.Address},",
				"          Email = {t.Email},",
				"          PhoneNumber = {t.PhoneNumber},",
				"          MaritalStatus = {t.MaritalStatus},",
				"          EffectiveDate = {t.EffectiveDate},",
				"          EndDate = {t.EndDate},",
				"          createBy = {t.createBy},",
				"          time = {t.time}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectTgt",
				"selectTgt derive(flag = 'active') ~> auditFlag",
				"unionExisting sort(asc(EmployeeID, true)) ~> sortEmpID",
				"sortEmpID sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ProductID as string,",
				"          Name as string,",
				"          ProductNumber as string,",
				"          MakeFlag as string,",
				"          FinishedGoodsFlag as string,",
				"          Color as string,",
				"          SafetyStockLevel as string,",
				"          ReorderPoint as string,",
				"          StandardCost as string,",
				"          ListPrice as string,",
				"          Size as string,",
				"          SizeUnitMeasureCode as string,",
				"          WeightUnitMeasureCode as string,",
				"          Weight as string,",
				"          DaysToManufacture as string,",
				"          ProductLine as string,",
				"          Class as string,",
				"          Style as string,",
				"          ProductSubcategoryID as string,",
				"          ProductModelID as string,",
				"          SellStartDate as string,",
				"          SellEndDate as string,",
				"          DiscontinuedDate as string,",
				"          rowguid as string,",
				"          ModifiedDate as string",
				"     ),",
				"     partitionFileNames:['target_scd2.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}