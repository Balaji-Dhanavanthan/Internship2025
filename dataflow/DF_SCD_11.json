{
	"name": "DF_SCD_11",
	"properties": {
		"folder": {
			"name": "DF_scd1"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "source"
				},
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "Target"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "SOURCEone"
				},
				{
					"name": "TARGETone"
				},
				{
					"name": "split1"
				},
				{
					"name": "split2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmployeeID as string,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as string,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as string,",
				"          HireDate as string,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as string,",
				"          EndDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source",
				"source(output(",
				"          EmployeeID as string,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as string,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as string,",
				"          HireDate as string,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as string,",
				"          EndDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Target",
				"SOURCEone, TARGETone join(SOURCEone@EmployeeID == TARGETone@EmployeeID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"source derive(EmployeeID = toInteger(EmployeeID),",
				"          DateOfBirth = toDate(DateOfBirth,'dd-MM-yyyy'),",
				"          Salary = toInteger(Salary),",
				"          HireDate = toDate(HireDate,'dd-MM-yyyy'),",
				"          EffectiveDate = toDate(EffectiveDate,'dd-MM-yyyy'),",
				"          EndDate = toDate(EndDate,'dd-MM-yyyy')) ~> SOURCEone",
				"Target derive(EmployeeID = toInteger(EmployeeID),",
				"          DateOfBirth = toDate(DateOfBirth,'yyyy-MM-dd'),",
				"          Salary = toInteger(Salary),",
				"          HireDate = toDate(HireDate,'yyyy-MM-dd'),",
				"          EffectiveDate = toDate(EffectiveDate,'yyyy-MM-dd'),",
				"          EndDate = toDate(EndDate,'yyyy-MM-dd')) ~> TARGETone",
				"join1 split(isNull(TARGETone@EmployeeID),",
				"     disjoint: false) ~> split1@(INSERT, UPDATE)",
				"split1@UPDATE split((split1@UPDATE@EmployeeID != split1@UPDATE@EmployeeID) || (split1@UPDATE@Department != split1@UPDATE@Department || split1@UPDATE@JobTitle != split1@UPDATE@JobTitle || split1@UPDATE@Salary != split1@UPDATE@Salary || split1@UPDATE@MaritalStatus!= split1@UPDATE@MaritalStatus),",
				"     disjoint: false) ~> split2@(Updates, existing)"
			]
		}
	}
}