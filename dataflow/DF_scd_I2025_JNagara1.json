{
	"name": "DF_scd_I2025_JNagara1",
	"properties": {
		"folder": {
			"name": "day5SCD"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Source",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DS_Source",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_CSV_Sink",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "join1"
				},
				{
					"name": "split1"
				},
				{
					"name": "select3"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "select4"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmployeeID as integer,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as date,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as double,",
				"          HireDate as date,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as integer,",
				"          MaritalStatus as string,",
				"          EffectiveDate as date,",
				"          EndDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          EmplyeeID as integer,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as date,",
				"          JobTitle as string,",
				"          Salary as double,",
				"          HireDate as date,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as integer,",
				"          MaritalStatus as string,",
				"          EffectiveDate as date,",
				"          EndDate as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source2 select(mapColumn(",
				"          {s.EmployeeID} = EmplyeeID,",
				"          {s.Name} = Name,",
				"          {s.Gender} = Gender,",
				"          {s.DateOfBirth} = DateOfBirth,",
				"          {s.JobTitle} = JobTitle,",
				"          {s.Salary} = Salary,",
				"          {s.HireDate} = HireDate,",
				"          {s.Address} = Address,",
				"          {s.Email} = Email,",
				"          {s.PhoneNumber} = PhoneNumber,",
				"          {s.MaritalStatus} = MaritalStatus,",
				"          {s.EffectiveDate} = EffectiveDate,",
				"          {s.EndDate} = EndDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source1 select(mapColumn(",
				"          EmployeeID,",
				"          Name,",
				"          Gender,",
				"          DateOfBirth,",
				"          Department,",
				"          JobTitle,",
				"          Salary,",
				"          HireDate,",
				"          Address,",
				"          Email,",
				"          PhoneNumber,",
				"          MaritalStatus,",
				"          EffectiveDate,",
				"          EndDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"derivedColumn1, derivedColumn2 join(EmployeeID == {s.EmployeeID},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 split(isNull({s.EmployeeID}),",
				"     disjoint: false) ~> split1@(insert, update)",
				"split1@insert select(mapColumn(",
				"          EmployeeID,",
				"          Name,",
				"          Gender,",
				"          DateOfBirth,",
				"          Department,",
				"          JobTitle,",
				"          Salary,",
				"          HireDate,",
				"          Address,",
				"          Email,",
				"          PhoneNumber,",
				"          MaritalStatus,",
				"          EffectiveDate,",
				"          EndDate,",
				"          createBy,",
				"          time = split1@insert@time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"split1@update alterRow(updateIf({s.JobTitle}!=JobTitle||Salary!={s.Salary}||{s.Address}!=Address||Email!={s.Email}||PhoneNumber!={s.PhoneNumber}||MaritalStatus!={s.MaritalStatus}||EffectiveDate!={s.EffectiveDate}||EndDate!={s.EndDate})) ~> alterRow1",
				"alterRow1 select(mapColumn(",
				"          EmployeeID,",
				"          Name,",
				"          Gender,",
				"          DateOfBirth,",
				"          Department,",
				"          JobTitle,",
				"          Salary,",
				"          HireDate,",
				"          Address,",
				"          Email,",
				"          PhoneNumber,",
				"          MaritalStatus,",
				"          EffectiveDate,",
				"          EndDate,",
				"          createBy,",
				"          time = split1@update@time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select2 derive(createBy = 'jaya',",
				"          time = currentTimestamp()) ~> derivedColumn1",
				"select1 derive(createdBy = 'jaya',",
				"          time = currentTimestamp()) ~> derivedColumn2",
				"select4, select3 union(byName: true)~> union1",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['emp_target'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          EmployeeID,",
				"          Name,",
				"          Gender,",
				"          DateOfBirth,",
				"          Department,",
				"          JobTitle,",
				"          Salary,",
				"          HireDate,",
				"          Address,",
				"          Email,",
				"          PhoneNumber,",
				"          MaritalStatus,",
				"          EffectiveDate,",
				"          EndDate,",
				"          createBy,",
				"          time",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}