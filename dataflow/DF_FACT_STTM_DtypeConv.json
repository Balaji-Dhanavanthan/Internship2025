{
	"name": "DF_FACT_STTM_DtypeConv",
	"properties": {
		"folder": {
			"name": "Workshop 2"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_CSV_test",
						"type": "DatasetReference"
					},
					"name": "PatientSrc"
				},
				{
					"dataset": {
						"referenceName": "DS_CSV_test",
						"type": "DatasetReference"
					},
					"name": "pharmSrc"
				},
				{
					"dataset": {
						"referenceName": "DS_CSV_test",
						"type": "DatasetReference"
					},
					"name": "YearSrc"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_CSV_test",
						"type": "DatasetReference"
					},
					"name": "SinkToBlob"
				}
			],
			"transformations": [
				{
					"name": "HandleStrNulls"
				},
				{
					"name": "HandleStrNulls1"
				},
				{
					"name": "LeftPtntOnPharm"
				},
				{
					"name": "HandleStrNulls2"
				},
				{
					"name": "LeftOnYear"
				},
				{
					"name": "SelectReqs"
				},
				{
					"name": "AddTransKey"
				},
				{
					"name": "AllTransformations"
				},
				{
					"name": "WindowForCopayAmt"
				},
				{
					"name": "WindowForMaxCopayAmt"
				},
				{
					"name": "FinalTransformation"
				},
				{
					"name": "FinSelect"
				},
				{
					"name": "FilteringOnlyAlphaNumericYearId"
				}
			],
			"scriptLines": [
				"source(output(",
				"          DOC_ID as string,",
				"          DOC_VER as string,",
				"          SFTWR_VENDR as string,",
				"          PHRMCY_NCPDP_ID as string,",
				"          PHRMCY_NAT_PROV_ID_NBR as string,",
				"          PTNT_CD as string,",
				"          PTNT_YR_OF_BRTH as string,",
				"          PTNT_GNDR as string,",
				"          PTNT_ZIP_CD as string,",
				"          PTNT_LANG_CD as string,",
				"          PTNT_LOC_CD as string,",
				"          NURSING_HOME_FAC_NM as string,",
				"          RX_ENROLL_IN_AUTOFILL as string,",
				"          RX_ENROLL_IN_RFIL as string,",
				"          RX_ENROLL_IN_CNTR_FILL as string,",
				"          PSCB_NPI as string,",
				"          PSCB_DEA_ID as string,",
				"          PSCB_ST_LIC_ID as string,",
				"          PSCB_LAST_NM as string,",
				"          PSCB_FIRST_NM as string,",
				"          OUT_PSCB_ZIP_CD as string,",
				"          RX_NBR as string,",
				"          TRANS_NBR as string,",
				"          RX_TYP as string,",
				"          DT_WRT as string,",
				"          DT_FILL as string,",
				"          TM_FILL as string,",
				"          OUT_MTRC_DSPN_QTY as string,",
				"          DAY_SPLY as string,",
				"          FILL_NBR as string,",
				"          RFIL_ORIGLY_AUTH as string,",
				"          RFIL_RMN as string,",
				"          DAW_CD as string,",
				"          OUT_INV_QTY_AFT_FILL as string,",
				"          PRC_OVRD as string,",
				"          DLV as string,",
				"          CMPND_IND as string,",
				"          PROD_ID as string,",
				"          RX_ORIG_IND as string,",
				"          PMT_TYP as string,",
				"          BAS_OF_INGRD_CST_REIMB as string,",
				"          REIMB_AMT as string,",
				"          COPAY_AMT as string,",
				"          INGRD_CST_AMT as string,",
				"          OUT_TOT_AMT_PD_BY_PTNT as string,",
				"          TOT_RX_PRC_COLL as string,",
				"          OUT_DSPN_FEE_PD as string,",
				"          COGS_AMT as string,",
				"          USUAL_AND_CSTMARY as string,",
				"          OUT_AWP_AMT as string,",
				"          OUT_DCT_AMT as string,",
				"          OUT_SLS_TAX as string,",
				"          PTY3_BIN as string,",
				"          PTY3_PCN as string,",
				"          PLN_ID as string,",
				"          GRP_ID as string,",
				"          NTWK_REIMB_ID as string,",
				"          PAYR_ID_QLFY as string,",
				"          PAYR_ID as string,",
				"          PTY3_CLM_REF_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PatientSrc",
				"source(output(",
				"          PHRMCY_NAT_PROV_ID_NBR as string,",
				"          PHRMCY_NCPDP_NBR as string,",
				"          PTNT_CD as string,",
				"          PSCB_FIRST_NM as string,",
				"          PSCB_LAST_NM as string,",
				"          LANG_CD as string,",
				"          DEAL_ID as string,",
				"          PHRMCY_NM as string,",
				"          PHRMCY_ST_ADDR_LINE1_TXT as string,",
				"          PHRMCY_ADDR_ZIP_CD as string,",
				"          PHRMCY_ADDR_CITY_NM as string,",
				"          PHRMCY_ADDR_ST_CD as string,",
				"          PHRMCY_ADDR_ST_NAME as string,",
				"          PHRMCY_ADDR_ZNE_CD as string,",
				"          PHRMCY_ADDR_ZNE_NM as string,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> pharmSrc",
				"source(output(",
				"          YEAR_ID as string,",
				"          YEAR_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> YearSrc",
				"FilteringOnlyAlphaNumericYearId derive(each(match(type == 'string'), $$ = iif($$ == 'NULL', toString(null()), $$))) ~> HandleStrNulls",
				"PatientSrc derive(each(match(type == 'string'), $$ = iif($$ == 'NULL', toString(null()), $$))) ~> HandleStrNulls1",
				"HandleStrNulls1, HandleStrNulls2 join(HandleStrNulls1@PTNT_CD == HandleStrNulls2@PTNT_CD,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> LeftPtntOnPharm",
				"pharmSrc derive(each(match(type == 'string'), $$ = iif($$ == 'NULL', toString(null()), $$))) ~> HandleStrNulls2",
				"LeftPtntOnPharm, HandleStrNulls join(PTNT_YR_OF_BRTH == YEAR_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> LeftOnYear",
				"LeftOnYear select(mapColumn(",
				"          PHRMCY_NAT_PROV_ID_NBR = HandleStrNulls1@PHRMCY_NAT_PROV_ID_NBR,",
				"          PTNT_CD = HandleStrNulls1@PTNT_CD,",
				"          PTNT_YR_OF_BRTH,",
				"          PTNT_GNDR,",
				"          DT_WRT,",
				"          DT_FILL,",
				"          PROD_ID,",
				"          PMT_TYP,",
				"          REIMB_AMT,",
				"          COPAY_AMT,",
				"          INGRD_CST_AMT,",
				"          COGS_AMT,",
				"          USUAL_AND_CSTMARY,",
				"          PHRMCY_NAT_PROV_ID_NBR = HandleStrNulls2@PHRMCY_NAT_PROV_ID_NBR,",
				"          PHRMCY_NCPDP_NBR,",
				"          LANG_CD,",
				"          DEAL_ID,",
				"          YEAR_ID = HandleStrNulls@YEAR_ID,",
				"          YEAR_DESC,",
				"          TRANS_NBR,",
				"          PHRMCY_NM,",
				"          GRP_ID,",
				"          TOT_RX_PRC_COLL",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectReqs",
				"SelectReqs keyGenerate(output(TRANS_KEY as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> AddTransKey",
				"AddTransKey derive(TRANS_NBR = iif(isNull(TRANS_NBR), -1, toInteger(TRANS_NBR)),",
				"          PTNT_CD = split(PTNT_CD, '_')[2],",
				"          PTNT_NM = iif(isNull(PHRMCY_NM), 'UNK', replace(replace(replace(replace(PHRMCY_NM, '-', ' '), ',', ' '), '&', ' '), \"'\", ' ')),",
				"          PTNT_YR_OF_BRTH = iif(isNull(PTNT_YR_OF_BRTH), '1900', PTNT_YR_OF_BRTH),",
				"          PTNT_AGE = iif(isNull(PTNT_YR_OF_BRTH), 0, minus(year(currentDate()), year(toDate(PTNT_YR_OF_BRTH)))),",
				"          PTNT_GNDR = iif(isNull(PTNT_GNDR), 'UNK',\r",
				"    iif(PTNT_GNDR == 'M', 'Male', \r",
				"        iif(PTNT_GNDR == 'F', 'Female', 'UNK'))\r",
				"),",
				"          TRANS_DATE = iif(isNull(DT_WRT), toDate('01-01-1900', 'dd-MM-yyyy'), toDate(DT_WRT, 'yyyyMMdd')),",
				"          PROD_ID = iif(isNull(PROD_ID), '-1', PROD_ID),",
				"          PROD_GROUP_ID = iif(isNull(GRP_ID) || trim(GRP_ID) == '', 'UNK', \r",
				"    left(trim(GRP_ID), 2) + right(trim(GRP_ID), 2)\r",
				"),",
				"          PAYMENT_TYPE = iif(isNull(PMT_TYP), 'UNK', \r",
				"    iif(PMT_TYP == '1', 'On-Line', \r",
				"        iif(PMT_TYP == '2', 'Cash', 'Others')\r",
				"    )\r",
				"),",
				"          COGS_AMT = iif(isNull(COGS_AMT), toDecimal(-1, 12, 2), \r",
				"    toDecimal(toInteger(COGS_AMT) / 100, 12, 2)\r",
				"),",
				"          REIMB_AMT = iif(isNull(COGS_AMT) || isNull(REIMB_AMT), -1, \r",
				"    toInteger(COGS_AMT) + toInteger(REIMB_AMT)\r",
				")\r",
				"\r",
				",",
				"          TOTAL_AMT = iif(isNull(COGS_AMT) || isNull(REIMB_AMT), -1, \r",
				"    toInteger(COGS_AMT) * toInteger(REIMB_AMT)\r",
				"),",
				"          INGRD_CST_AMT = iif(isNull(INGRD_CST_AMT), -1,\r",
				"    toInteger(INGRD_CST_AMT) / 100\r",
				"),",
				"          FILLED_DATE = iif(isNull(DT_FILL), toDate('01-01-1900', 'dd-MM-yyy'), toDate(DT_FILL, 'yyyyMMdd')),",
				"          PAYR_CNTRCT_FLG = iif(isNull(TOT_RX_PRC_COLL) || isNull(USUAL_AND_CSTMARY), 'UNK',\r",
				"    iif(toInteger(TOT_RX_PRC_COLL) > toInteger(USUAL_AND_CSTMARY), 'Y', 'N')\r",
				"),",
				"          YEAR_DESC = iif(isNull(YEAR_DESC), 'UNK', YEAR_DESC),",
				"          LOAD_DATE = currentDate(),",
				"          dummy = toString(null())) ~> AllTransformations",
				"AllTransformations window(over(PROD_ID),",
				"     asc(dummy, true),",
				"     PTNT_COPAY_AMT = toDecimal(avg(toInteger(COPAY_AMT)), 12, 2)) ~> WindowForCopayAmt",
				"WindowForCopayAmt window(asc(dummy, true),",
				"     SLS_TAX_AMT = max(PTNT_COPAY_AMT)) ~> WindowForMaxCopayAmt",
				"WindowForMaxCopayAmt derive(DCT_AMT = iif(PTNT_COPAY_AMT > 0 && TOTAL_AMT != -1, \r",
				"    toDecimal(PTNT_COPAY_AMT / TOTAL_AMT, 12, 2), \r",
				"    iif(TOTAL_AMT != -1,\r",
				"        toDecimal(TOTAL_AMT * 0.2, 12, 2),\r",
				"        toDecimal(-1, 12, 2)\r",
				"    )\r",
				")) ~> FinalTransformation",
				"FinalTransformation select(mapColumn(",
				"          TRANS_KEY,",
				"          TRANS_NBR,",
				"          PTNT_CD,",
				"          PTNT_NM,",
				"          PTNT_YR_OF_BRTH,",
				"          PTNT_AGE,",
				"          PTNT_GNDR,",
				"          TRANS_DATE,",
				"          PROD_ID,",
				"          PROD_GROUP_ID,",
				"          PAYMENT_TYPE,",
				"          COGS_AMT,",
				"          REIMB_AMT,",
				"          PTNT_COPAY_AMT,",
				"          SLS_TAX_AMT,",
				"          TOTAL_AMT,",
				"          DCT_AMT,",
				"          INGRD_CST_AMT,",
				"          FILLED_DATE,",
				"          PAYR_CNTRCT_FLG,",
				"          YEAR_DESC,",
				"          LOAD_DATE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinSelect",
				"YearSrc derive(YEAR_ID = iif(regexMatch(YEAR_ID, '^[a-zA-Z][0-9]{4}'), toString(null()), YEAR_ID)) ~> FilteringOnlyAlphaNumericYearId",
				"FinSelect sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['STTM_PTNT_STG.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SinkToBlob"
			]
		}
	}
}