{
	"name": "DF_scd_I2025_JNagara1",
	"properties": {
		"folder": {
			"name": "day5SCD"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Source",
						"type": "DatasetReference"
					},
					"name": "source"
				},
				{
					"dataset": {
						"referenceName": "DS_CSV_Sink",
						"type": "DatasetReference"
					},
					"name": "target"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_CSV_Sink",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "Targetselect"
				},
				{
					"name": "sourceSelect"
				},
				{
					"name": "join1"
				},
				{
					"name": "split1"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "select4"
				},
				{
					"name": "union1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "insertedrow"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "castSRC"
				},
				{
					"name": "castTGT"
				},
				{
					"name": "derivedColumn4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmployeeID as string,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as string,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as string,",
				"          HireDate as string,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as string,",
				"          EndDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source",
				"source(output(",
				"          EmployeeID as short,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as string,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as integer,",
				"          HireDate as string,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as string,",
				"          EndDate as string,",
				"          createBy as string,",
				"          time as timestamp,",
				"          modifiedBy as string,",
				"          modifiedTime as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> target",
				"castTGT select(mapColumn(",
				"          {s.EmplyeeID} = EmployeeID,",
				"          {s.Name} = Name,",
				"          {s.Gender} = Gender,",
				"          {s.DateOfBirth} = DateOfBirth,",
				"          {s.JobTitle} = JobTitle,",
				"          {s.Salary} = Salary,",
				"          {s.HireDate} = HireDate,",
				"          {s.Address} = Address,",
				"          {s.Email} = Email,",
				"          {s.PhoneNumber} = PhoneNumber,",
				"          {s.MaritalStatus} = MaritalStatus,",
				"          {s.EffectiveDate} = EffectiveDate,",
				"          {s.EndDate} = EndDate,",
				"          {s.createBy} = createBy,",
				"          {s.createdtime} = time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Targetselect",
				"castSRC select(mapColumn(",
				"          EmployeeID,",
				"          Name,",
				"          Gender,",
				"          DateOfBirth,",
				"          Department,",
				"          JobTitle,",
				"          Salary,",
				"          HireDate,",
				"          Address,",
				"          Email,",
				"          PhoneNumber,",
				"          MaritalStatus,",
				"          EffectiveDate,",
				"          EndDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sourceSelect",
				"sourceSelect, derivedColumn3 join(EmployeeID == {s.EmplyeeID},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 split(isNull({s.EmplyeeID}),",
				"     disjoint: false) ~> split1@(insert, update)",
				"split1@update alterRow(upsertIf(EmployeeID!={s.EmplyeeID}||Name!={s.Name}||{s.Gender}!=Gender||DateOfBirth!={s.DateOfBirth}||{s.JobTitle}!=JobTitle||Salary!={s.Salary}||{s.Address}!=Address||{s.Email}!=Email||PhoneNumber!={s.PhoneNumber})) ~> alterRow1",
				"alterRow1 select(mapColumn(",
				"          EmployeeID,",
				"          Name,",
				"          Gender,",
				"          DateOfBirth,",
				"          Department,",
				"          JobTitle,",
				"          Salary,",
				"          HireDate,",
				"          Address,",
				"          Email,",
				"          PhoneNumber,",
				"          MaritalStatus,",
				"          EffectiveDate,",
				"          EndDate,",
				"          createBy = {s.createBy},",
				"          time = {s.createdtime},",
				"          modifiedBy = split1@update@modifiedBy,",
				"          modifiedTime = split1@update@modifiedTime",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"derivedColumn2, insertedrow union(byName: true)~> union1",
				"split1@insert derive(createBy = 'I2025_JNagara1',",
				"          createdtime = currentTimestamp()) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          EmployeeID,",
				"          Name,",
				"          Gender,",
				"          DateOfBirth,",
				"          Department,",
				"          JobTitle,",
				"          Salary,",
				"          HireDate,",
				"          Address,",
				"          Email,",
				"          PhoneNumber,",
				"          MaritalStatus,",
				"          EffectiveDate,",
				"          EndDate,",
				"          createBy,",
				"          createdtime",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> insertedrow",
				"select4 derive(modifiedBy = 'I2025_JNagara1',",
				"          modifiedTime = currentTimestamp()) ~> derivedColumn2",
				"Targetselect derive(modifiedBy = 'unk',",
				"          modifiedTime = '9999-12-31') ~> derivedColumn3",
				"derivedColumn4 derive(EmployeeID = toInteger(EmployeeID),",
				"          Name = toString(Name),",
				"          Gender = toString(Gender),",
				"          DateOfBirth = toDate(DateOfBirth),",
				"          Department = toString(Department),",
				"          JobTitle = toString(JobTitle),",
				"          Salary = toDecimal(Salary,2),",
				"          HireDate = toDate(HireDate),",
				"          Address = ERROR_FUNCTION(''),",
				"          Email = ERROR_FUNCTION(''),",
				"          PhoneNumber = ERROR_FUNCTION(''),",
				"          MaritalStatus = ERROR_FUNCTION(''),",
				"          EffectiveDate = ERROR_FUNCTION('toDate(, date_format, locale)'),",
				"          EndDate = toDate(EndDate, 'yyyy-MM-dd')) ~> castSRC",
				"target derive() ~> castTGT",
				"source derive(column1 = ERROR_FUNCTION(''),",
				"          column2 = ERROR_FUNCTION('')) ~> derivedColumn4",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['targetSCD.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          EmployeeID,",
				"          Name,",
				"          Gender,",
				"          DateOfBirth,",
				"          Department,",
				"          JobTitle,",
				"          Salary,",
				"          HireDate,",
				"          Address,",
				"          Email,",
				"          PhoneNumber,",
				"          MaritalStatus,",
				"          EffectiveDate,",
				"          EndDate,",
				"          createBy,",
				"          time,",
				"          modifiedBy,",
				"          modifiedTime",
				"     ),",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}