{
	"name": "DF_STTM_Fact",
	"properties": {
		"folder": {
			"name": "Day9"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Fact_STTM_SRC",
						"type": "DatasetReference"
					},
					"name": "year"
				},
				{
					"dataset": {
						"referenceName": "DS_Fact_STTM_SRC",
						"type": "DatasetReference"
					},
					"name": "phrmcy"
				},
				{
					"dataset": {
						"referenceName": "DS_Fact_STTM_SRC",
						"type": "DatasetReference"
					},
					"name": "ptnt"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "yearName"
				},
				{
					"name": "phrmcyName"
				},
				{
					"name": "ptntName"
				},
				{
					"name": "emptyValuetoNull"
				},
				{
					"name": "derivedColumn4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          YEAR_ID as string,",
				"          YEAR_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> year",
				"source(output(",
				"          PHRMCY_NAT_PROV_ID_NBR as string,",
				"          PHRMCY_NCPDP_NBR as string,",
				"          PTNT_CD as string,",
				"          PSCB_FIRST_NM as string,",
				"          PSCB_LAST_NM as string,",
				"          LANG_CD as string,",
				"          DEAL_ID as string,",
				"          PHRMCY_NM as string,",
				"          PHRMCY_ST_ADDR_LINE1_TXT as string,",
				"          PHRMCY_ADDR_ZIP_CD as string,",
				"          PHRMCY_ADDR_CITY_NM as string,",
				"          PHRMCY_ADDR_ST_CD as string,",
				"          PHRMCY_ADDR_ST_NAME as string,",
				"          PHRMCY_ADDR_ZNE_CD as string,",
				"          PHRMCY_ADDR_ZNE_NM as string,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> phrmcy",
				"source(output(",
				"          DOC_ID as string,",
				"          DOC_VER as string,",
				"          SFTWR_VENDR as string,",
				"          PHRMCY_NCPDP_ID as string,",
				"          PHRMCY_NAT_PROV_ID_NBR as string,",
				"          PTNT_CD as string,",
				"          PTNT_YR_OF_BRTH as string,",
				"          PTNT_GNDR as string,",
				"          PTNT_ZIP_CD as string,",
				"          PTNT_LANG_CD as string,",
				"          PTNT_LOC_CD as string,",
				"          NURSING_HOME_FAC_NM as string,",
				"          RX_ENROLL_IN_AUTOFILL as string,",
				"          RX_ENROLL_IN_RFIL as string,",
				"          RX_ENROLL_IN_CNTR_FILL as string,",
				"          PSCB_NPI as string,",
				"          PSCB_DEA_ID as string,",
				"          PSCB_ST_LIC_ID as string,",
				"          PSCB_LAST_NM as string,",
				"          PSCB_FIRST_NM as string,",
				"          OUT_PSCB_ZIP_CD as string,",
				"          RX_NBR as string,",
				"          TRANS_NBR as string,",
				"          RX_TYP as string,",
				"          DT_WRT as string,",
				"          DT_FILL as string,",
				"          TM_FILL as string,",
				"          OUT_MTRC_DSPN_QTY as string,",
				"          DAY_SPLY as string,",
				"          FILL_NBR as string,",
				"          RFIL_ORIGLY_AUTH as string,",
				"          RFIL_RMN as string,",
				"          DAW_CD as string,",
				"          OUT_INV_QTY_AFT_FILL as string,",
				"          PRC_OVRD as string,",
				"          DLV as string,",
				"          CMPND_IND as string,",
				"          PROD_ID as string,",
				"          RX_ORIG_IND as string,",
				"          PMT_TYP as string,",
				"          BAS_OF_INGRD_CST_REIMB as string,",
				"          REIMB_AMT as string,",
				"          COPAY_AMT as string,",
				"          INGRD_CST_AMT as string,",
				"          OUT_TOT_AMT_PD_BY_PTNT as string,",
				"          TOT_RX_PRC_COLL as string,",
				"          OUT_DSPN_FEE_PD as string,",
				"          COGS_AMT as string,",
				"          USUAL_AND_CSTMARY as string,",
				"          OUT_AWP_AMT as string,",
				"          OUT_DCT_AMT as string,",
				"          OUT_SLS_TAX as string,",
				"          PTY3_BIN as string,",
				"          PTY3_PCN as string,",
				"          PLN_ID as string,",
				"          GRP_ID as string,",
				"          NTWK_REIMB_ID as string,",
				"          PAYR_ID_QLFY as string,",
				"          PAYR_ID as string,",
				"          PTY3_CLM_REF_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ptnt",
				"ptntName, phrmcyName join({p.PTNT_CD} == {pt.PTNT_CD},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, yearName join({p.PTNT_YR_OF_BRTH} == {y.YEAR_ID},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"ptnt derive(each(match(type=='string'), $$ = case($$=='NULL', toString(null()), $$))) ~> derivedColumn1",
				"phrmcy derive(each(match(type=='string'), $$ = case($$=='NULL', toString(null()), $$))) ~> derivedColumn2",
				"year derive(each(match(type=='string'), $$ = case($$=='NULL', toString(null()), $$))) ~> derivedColumn3",
				"derivedColumn3 select(mapColumn(",
				"          {y.YEAR_ID} = YEAR_ID,",
				"          {y.YEAR_DESC} = YEAR_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> yearName",
				"derivedColumn2 select(mapColumn(",
				"          {pt.PHRMCY_NAT_PROV_ID_NBR} = PHRMCY_NAT_PROV_ID_NBR,",
				"          {pt.PHRMCY_NCPDP_NBR} = PHRMCY_NCPDP_NBR,",
				"          {pt.PTNT_CD} = PTNT_CD,",
				"          {pt.PSCB_FIRST_NM} = PSCB_FIRST_NM,",
				"          {pt.PSCB_LAST_NM} = PSCB_LAST_NM,",
				"          {pt.LANG_CD} = LANG_CD,",
				"          {pt.DEAL_ID} = DEAL_ID,",
				"          {pt.PHRMCY_NM} = PHRMCY_NM,",
				"          {pt.PHRMCY_ST_ADDR_LINE1_TXT} = PHRMCY_ST_ADDR_LINE1_TXT,",
				"          {pt.PHRMCY_ADDR_ZIP_CD} = PHRMCY_ADDR_ZIP_CD,",
				"          {pt.PHRMCY_ADDR_CITY_NM} = PHRMCY_ADDR_CITY_NM,",
				"          {pt.PHRMCY_ADDR_ST_CD} = PHRMCY_ADDR_ST_CD,",
				"          {pt.PHRMCY_ADDR_ST_NAME} = PHRMCY_ADDR_ST_NAME,",
				"          {pt.PHRMCY_ADDR_ZNE_CD} = PHRMCY_ADDR_ZNE_CD,",
				"          {pt.PHRMCY_ADDR_ZNE_NM} = PHRMCY_ADDR_ZNE_NM,",
				"          {pt.PHRMCY_SYS_IVR_DTA_STRT_DT} = PHRMCY_SYS_IVR_DTA_STRT_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> phrmcyName",
				"derivedColumn1 select(mapColumn(",
				"          each(match(/* All input columns */ true()),",
				"               /* Input name */ concat('p.',$$) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ptntName",
				"join2 derive(each(match(type=='string'), $$ = case(trim($$)=='',toString(null()) ,$$))) ~> emptyValuetoNull",
				"emptyValuetoNull derive(TRANS_NBR = ERROR_FUNCTION(''),",
				"          PTNT_CD = ERROR_FUNCTION(''),",
				"          PTNT_NM = ERROR_FUNCTION(''),",
				"          PTNT_YR_OF_BRTH = ERROR_FUNCTION(''),",
				"          PTNT_AGE = ERROR_FUNCTION(''),",
				"          PTNT_GNDR = ERROR_FUNCTION(''),",
				"          TRANS_DATE = ERROR_FUNCTION(''),",
				"          PROD_ID = ERROR_FUNCTION(''),",
				"          PROD_GROUP_ID = ERROR_FUNCTION(''),",
				"          PAYMENT_TYPE = ERROR_FUNCTION(''),",
				"          COGS_AMT = ERROR_FUNCTION(''),",
				"          REIMB_AMT = ERROR_FUNCTION(''),",
				"          {PTNT_COPAY_AMT(COL1)} = ERROR_FUNCTION(''),",
				"          {SLS_TAX_AMT(COL2)} = ERROR_FUNCTION(''),",
				"          {TOTAL_AMT(COL 3)} = ERROR_FUNCTION(''),",
				"          DCT_AMT = ERROR_FUNCTION(''),",
				"          INGRD_CST_AMT = ERROR_FUNCTION(''),",
				"          FILLED_DATE = ERROR_FUNCTION(''),",
				"          PAYR_CNTRCT_FLG = ERROR_FUNCTION(''),",
				"          YEAR_DESC = ERROR_FUNCTION('')) ~> derivedColumn4"
			]
		}
	}
}