{
	"name": "ADF_SCD_1",
	"properties": {
		"folder": {
			"name": "TDSG_ADF_DataFlow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "sourceData"
				},
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "targetData"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "InsertSink"
				}
			],
			"transformations": [
				{
					"name": "TargetSelect"
				},
				{
					"name": "Sourceselect"
				},
				{
					"name": "joining"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "union1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          BusinessKey as string,",
				"          Email as string,",
				"          Phone as string,",
				"          Designation as string,",
				"          Salary as double,",
				"          LastModified as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceData",
				"source(output(",
				"          EmployeeID as short,",
				"          BusinessKey as string,",
				"          Email as string,",
				"          Phone as string,",
				"          Designation as string,",
				"          Salary as double,",
				"          EffectiveDate as string,",
				"          ExpiryDate as string,",
				"          IsActive as boolean,",
				"          CreatedDate as string,",
				"          ModifiedDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> targetData",
				"targetData select(mapColumn(",
				"          BusinessKey,",
				"          Email,",
				"          Phone,",
				"          Designation,",
				"          Salary,",
				"          EffectiveDate,",
				"          ExpiryDate,",
				"          CreatedDate,",
				"          ModifiedDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> TargetSelect",
				"sourceData select(mapColumn(",
				"          src_BusinessKey = BusinessKey,",
				"          src_Email = Email,",
				"          src_Phone = Phone,",
				"          src_Designation = Designation,",
				"          src_Salary = Salary,",
				"          src_LastModified = LastModified",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Sourceselect",
				"Sourceselect, TargetSelect join(src_BusinessKey == BusinessKey,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joining",
				"joining split(isNull(BusinessKey),",
				"     (src_BusinessKey==BusinessKey) && ((src_Email!=Email)||(src_Designation!=Designation)||(src_Salary!=Salary)),",
				"     disjoint: false) ~> split1@(INSERT, UPDATE)",
				"split1@INSERT derive(created_by = 'I2025_MSyed',",
				"          created_at = currentDate()) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          src_BusinessKey,",
				"          src_Email,",
				"          src_Phone,",
				"          src_Designation,",
				"          src_Salary,",
				"          BusinessKey,",
				"          Email,",
				"          Phone,",
				"          Designation,",
				"          Salary,",
				"          EffectiveDate,",
				"          ExpiryDate,",
				"          CreatedDate,",
				"          ModifiedDate,",
				"          created_by,",
				"          created_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, split1@UPDATE union(byName: true)~> union1",
				"union1 select(mapColumn(",
				"          src_BusinessKey,",
				"          src_Email,",
				"          src_Phone,",
				"          src_Designation,",
				"          src_Salary,",
				"          created_by,",
				"          created_at,",
				"          src_LastModified",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Prop_0 as string,",
				"          match_id as string,",
				"          date as string,",
				"          match_type as string,",
				"          event_name as string,",
				"          innings as string,",
				"          batting_team as string,",
				"          bowling_team as string,",
				"          over as string,",
				"          ball as string,",
				"          ball_no as string,",
				"          batter as string,",
				"          bat_pos as string,",
				"          runs_batter as string,",
				"          balls_faced as string,",
				"          bowler as string,",
				"          valid_ball as string,",
				"          runs_extras as string,",
				"          runs_total as string,",
				"          runs_bowler as string,",
				"          runs_not_boundary as string,",
				"          extra_type as string,",
				"          non_striker as string,",
				"          non_striker_pos as string,",
				"          wicket_kind as string,",
				"          player_out as string,",
				"          fielders as string,",
				"          runs_target as string,",
				"          review_batter as string,",
				"          team_reviewed as string,",
				"          review_decision as string,",
				"          umpire as string,",
				"          umpires_call as string,",
				"          player_of_match as string,",
				"          match_won_by as string,",
				"          win_outcome as string,",
				"          toss_winner as string,",
				"          toss_decision as string,",
				"          venue as string,",
				"          city as string,",
				"          day as string,",
				"          month as string,",
				"          year as string,",
				"          season as string,",
				"          gender as string,",
				"          team_type as string,",
				"          superover_winner as string,",
				"          result_type as string,",
				"          method as string,",
				"          balls_per_over as string,",
				"          overs as string,",
				"          event_match_no as string,",
				"          stage as string,",
				"          match_number as string,",
				"          team_runs as string,",
				"          team_balls as string,",
				"          team_wicket as string,",
				"          new_batter as string,",
				"          batter_runs as string,",
				"          batter_balls as string,",
				"          bowler_wicket as string,",
				"          batting_partners as string,",
				"          next_batter as string,",
				"          striker_out as string",
				"     ),",
				"     partitionFileNames:['SCD1FinalReport1.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> InsertSink"
			]
		}
	}
}