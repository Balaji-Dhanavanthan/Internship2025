{
	"name": "DF_ADF_Assessment",
	"properties": {
		"folder": {
			"name": "ADF_Assessment_DataFlow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_ADF_CSV_Blob",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "OutputToCsv"
				}
			],
			"transformations": [
				{
					"name": "alterGenres"
				},
				{
					"name": "modifyingColNames"
				},
				{
					"name": "modifyingAnimeTypeOVA"
				},
				{
					"name": "modifyingAnimeTypeTV"
				},
				{
					"name": "modifyingAnimeTypeMovie"
				},
				{
					"name": "RemovingEmptyColsByType"
				},
				{
					"name": "addingAuditCols"
				}
			],
			"scriptLines": [
				"source(output(",
				"          anime_id as integer,",
				"          name as string,",
				"          genre as string,",
				"          type as string,",
				"          episodes as string,",
				"          rating as double,",
				"          members as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"modifyingColNames derive(genre = replace(genre, ',', ':'),",
				"          rating = round(rating, 1),",
				"          anime_type = replace(anime_type, 'ONA', 'Original Net Animation')) ~> alterGenres",
				"source1 select(mapColumn(",
				"          anime_id,",
				"          name,",
				"          genre,",
				"          anime_type = type,",
				"          episodes,",
				"          rating,",
				"          members",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> modifyingColNames",
				"alterGenres derive(anime_type = replace(anime_type, 'OVA', 'Original video animation')) ~> modifyingAnimeTypeOVA",
				"modifyingAnimeTypeOVA derive(anime_type = replace(anime_type, 'TV', 'Television')) ~> modifyingAnimeTypeTV",
				"modifyingAnimeTypeTV derive(anime_type = replace(anime_type, 'Movie', 'Cinema')) ~> modifyingAnimeTypeMovie",
				"modifyingAnimeTypeMovie filter(anime_type != '') ~> RemovingEmptyColsByType",
				"RemovingEmptyColsByType derive(createdAt = currentUTC(),",
				"          createdBy = 'I2025_EStalin') ~> addingAuditCols",
				"addingAuditCols sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['TGT_Anime_I2025_EStalin_Qn1.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> OutputToCsv"
			]
		}
	}
}