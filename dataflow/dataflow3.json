{
	"name": "dataflow3",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Excel1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "Excel1",
						"type": "DatasetReference"
					},
					"name": "traget"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "join1"
				},
				{
					"name": "split1"
				},
				{
					"name": "union1"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "derivedColumn5"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> traget",
				"source1 derive({col.name} = upper) ~> derivedColumn1",
				"derivedColumn1 derive(each(match(type=='string'), $$ = coalesce($$,'UNK'))) ~> derivedColumn2",
				"derivedColumn2 keyGenerate(output(EMP_SK as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1, traget join(EMP_SK == ERROR_FUNCTION(''),",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 split(isNull(target@emp_id),",
				"     source*emp_it == traget@EMP_id && source@city!=traget@ city,",
				"     source*emp_it == traget@EMP_id && source@city ==traget@ city,",
				"     disjoint: false) ~> split1@(inset, update, existing)",
				"derivedColumn3, select1, select2 union(byName: true)~> union1",
				"split1@inset derive(create_date = curdate,",
				"          c_b = arun,",
				"          updated_date = ERROR_FUNCTION('2025.09.01'),",
				"          u_b = '-') ~> derivedColumn3",
				"split1@update derive(up_d = curdate,",
				"          up_b = arun,",
				"          city = source@city) ~> derivedColumn4",
				"split1@existing derive({same no column like above 4} = ERROR_FUNCTION('')) ~> derivedColumn5",
				"derivedColumn4 select(mapColumn(",
				"          {col.name},",
				"          EMP_SK,",
				"          up_d,",
				"          up_b,",
				"          city",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn5 select(mapColumn(",
				"          {col.name},",
				"          EMP_SK,",
				"          {same no column like above 4}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Prop_0 as string,",
				"          match_id as string,",
				"          date as string,",
				"          match_type as string,",
				"          event_name as string,",
				"          innings as string,",
				"          batting_team as string,",
				"          bowling_team as string,",
				"          over as string,",
				"          ball as string,",
				"          ball_no as string,",
				"          batter as string,",
				"          bat_pos as string,",
				"          runs_batter as string,",
				"          balls_faced as string,",
				"          bowler as string,",
				"          valid_ball as string,",
				"          runs_extras as string,",
				"          runs_total as string,",
				"          runs_bowler as string,",
				"          runs_not_boundary as string,",
				"          extra_type as string,",
				"          non_striker as string,",
				"          non_striker_pos as string,",
				"          wicket_kind as string,",
				"          player_out as string,",
				"          fielders as string,",
				"          runs_target as string,",
				"          review_batter as string,",
				"          team_reviewed as string,",
				"          review_decision as string,",
				"          umpire as string,",
				"          umpires_call as string,",
				"          player_of_match as string,",
				"          match_won_by as string,",
				"          win_outcome as string,",
				"          toss_winner as string,",
				"          toss_decision as string,",
				"          venue as string,",
				"          city as string,",
				"          day as string,",
				"          month as string,",
				"          year as string,",
				"          season as string,",
				"          gender as string,",
				"          team_type as string,",
				"          superover_winner as string,",
				"          result_type as string,",
				"          method as string,",
				"          balls_per_over as string,",
				"          overs as string,",
				"          event_match_no as string,",
				"          stage as string,",
				"          match_number as string,",
				"          team_runs as string,",
				"          team_balls as string,",
				"          team_wicket as string,",
				"          new_batter as string,",
				"          batter_runs as string,",
				"          batter_balls as string,",
				"          bowler_wicket as string,",
				"          batting_partners as string,",
				"          next_batter as string,",
				"          striker_out as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}