{
	"name": "DF_SCD1_I2025_SRangan1",
	"properties": {
		"folder": {
			"name": "TDSG Day 5 Training"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "source"
				},
				{
					"dataset": {
						"referenceName": "I2025_SRangan1",
						"type": "DatasetReference"
					},
					"name": "target"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "I2025_SRangan1",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "nullhandling"
				},
				{
					"name": "join1"
				},
				{
					"name": "dcaudit"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select4"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmployeeID as short,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as date,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as integer,",
				"          HireDate as date,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as date,",
				"          EndDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source",
				"source(output(",
				"          EmployeeID as integer,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as date,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as integer,",
				"          HireDate as date,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as date,",
				"          EndDate as date,",
				"          createBy as string,",
				"          time as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> target",
				"select1 derive(each(match(type=='string'), $$ = iifNull($$, 'UNK')),",
				"          each(match(type=='Integer'), $$ = iifNull($#, -1)),",
				"          each(match(type == 'float'), $$ = iifNull($#, 0))) ~> nullhandling",
				"surrogateKey1, select4 join(select1@EmployeeID == select4@EmployeeID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 derive(createBy = 'I2025_SRangan1',",
				"          time = currentDate()) ~> dcaudit",
				"source select(mapColumn(",
				"          EmployeeID,",
				"          Name,",
				"          Gender,",
				"          DateOfBirth,",
				"          Department,",
				"          JobTitle,",
				"          Salary,",
				"          HireDate,",
				"          Address,",
				"          Email,",
				"          PhoneNumber,",
				"          MaritalStatus,",
				"          EffectiveDate,",
				"          EndDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"dcaudit select(mapColumn(",
				"          EmployeeID = select1@EmployeeID,",
				"          Name = nullhandling@Name,",
				"          DateOfBirth = select1@DateOfBirth,",
				"          Department = nullhandling@Department,",
				"          JobTitle = nullhandling@JobTitle,",
				"          Salary = select1@Salary,",
				"          HireDate = select1@HireDate,",
				"          Address = nullhandling@Address,",
				"          Email = nullhandling@Email,",
				"          PhoneNumber = nullhandling@PhoneNumber,",
				"          MaritalStatus = nullhandling@MaritalStatus,",
				"          EffectiveDate = select1@EffectiveDate,",
				"          EndDate = select1@EndDate,",
				"          surr_key,",
				"          createBy,",
				"          time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"nullhandling keyGenerate(output(surr_key as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"target select(mapColumn(",
				"          EmployeeID,",
				"          Name,",
				"          Gender,",
				"          DateOfBirth,",
				"          Department,",
				"          JobTitle,",
				"          Salary,",
				"          HireDate,",
				"          Address,",
				"          Email,",
				"          PhoneNumber,",
				"          MaritalStatus,",
				"          EffectiveDate,",
				"          EndDate,",
				"          createBy,",
				"          time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ProductID as string,",
				"          Name as string,",
				"          ProductNumber as string,",
				"          MakeFlag as string,",
				"          FinishedGoodsFlag as string,",
				"          Color as string,",
				"          SafetyStockLevel as string,",
				"          ReorderPoint as string,",
				"          StandardCost as string,",
				"          ListPrice as string,",
				"          Size as string,",
				"          SizeUnitMeasureCode as string,",
				"          WeightUnitMeasureCode as string,",
				"          Weight as string,",
				"          DaysToManufacture as string,",
				"          ProductLine as string,",
				"          Class as string,",
				"          Style as string,",
				"          ProductSubcategoryID as string,",
				"          ProductModelID as string,",
				"          SellStartDate as string,",
				"          SellEndDate as string,",
				"          DiscontinuedDate as string,",
				"          rowguid as string,",
				"          ModifiedDate as string",
				"     ),",
				"     partitionFileNames:['employee_target.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}