{
	"name": "SCD_1",
	"properties": {
		"folder": {
			"name": "TDSG_ADF_DataFlow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "target"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "sourceselect1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "targetderived"
				},
				{
					"name": "insert"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmployeeID as short,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as string,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as integer,",
				"          HireDate as string,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as string,",
				"          EndDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          EmployeeID as short,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as string,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as integer,",
				"          HireDate as string,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as string,",
				"          EndDate as string,",
				"          created_by as string,",
				"          created_at as date,",
				"          modified_by as string,",
				"          modified_at as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> target",
				"derivedColumn2 select(mapColumn(",
				"          src_EmployeeID = EmployeeID,",
				"          src_Name = Name,",
				"          src_Gender = Gender,",
				"          src_DateOfBirth = DateOfBirth,",
				"          src_Department = Department,",
				"          src_JobTitle = JobTitle,",
				"          src_Salary = Salary,",
				"          src_HireDate = HireDate,",
				"          src_Address = Address,",
				"          src_Email = Email,",
				"          src_PhoneNumber = PhoneNumber,",
				"          src_MaritalStatus = MaritalStatus,",
				"          src_EffectiveDate = EffectiveDate,",
				"          src_EndDate = EndDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sourceselect1",
				"sourceselect1, targetderived join(src_EmployeeID == EmployeeID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"insert@INSERT select(mapColumn(",
				"          src_EmployeeID,",
				"          src_Name,",
				"          src_Gender,",
				"          src_DateOfBirth,",
				"          src_Department,",
				"          src_JobTitle,",
				"          src_Salary,",
				"          src_HireDate,",
				"          src_Address,",
				"          src_Email,",
				"          src_PhoneNumber,",
				"          src_MaritalStatus,",
				"          src_EffectiveDate,",
				"          src_EndDate,",
				"          created_by,",
				"          created_at,",
				"          modified_by,",
				"          modified_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(created_by = 'I2025_MSyed',",
				"          created_at = currentDate(),",
				"          modified_at = toDate('')) ~> derivedColumn1",
				"source1 derive(EmployeeID = toInteger(EmployeeID),",
				"          HireDate = toDate(HireDate,'dd-MM-yyyy'),",
				"          DateOfBirth = toDate(DateOfBirth,'dd-MM-yyyy'),",
				"          EffectiveDate = toDate(EffectiveDate,'dd-MM-yyyy'),",
				"          EndDate = toDate(EndDate,'dd-MM-yyyy')) ~> derivedColumn2",
				"target derive(EmployeeID = toInteger(EmployeeID),",
				"          DateOfBirth = toDate(DateOfBirth,'yyyy-MM-dd'),",
				"          HireDate = toDate(HireDate,'yyyy-MM-dd'),",
				"          EffectiveDate = toDate(EffectiveDate,'yyyy-MM-dd'),",
				"          EndDate = toDate(EndDate,'yyyy-MM-dd')) ~> targetderived",
				"join1 split(isNull(EmployeeID),",
				"     src_EmployeeID == EmployeeID && (src_Department != Department || src_JobTitle != JobTitle || src_Salary != Salary || src_MaritalStatus != MaritalStatus),",
				"     disjoint: false) ~> insert@(INSERT, update, existing)",
				"targetderived select(mapColumn(",
				"          EmployeeID,",
				"          Name,",
				"          Gender,",
				"          DateOfBirth,",
				"          Department,",
				"          JobTitle,",
				"          Salary,",
				"          HireDate,",
				"          Address,",
				"          Email,",
				"          PhoneNumber,",
				"          MaritalStatus,",
				"          EffectiveDate,",
				"          EndDate,",
				"          created_by,",
				"          created_at,",
				"          modified_by,",
				"          modified_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"insert@update select(mapColumn(",
				"          src_EmployeeID,",
				"          src_Name,",
				"          src_Gender,",
				"          src_DateOfBirth,",
				"          src_Department,",
				"          src_JobTitle,",
				"          src_Salary,",
				"          src_HireDate,",
				"          src_Address,",
				"          src_Email,",
				"          src_PhoneNumber,",
				"          src_MaritalStatus,",
				"          src_EffectiveDate,",
				"          src_EndDate,",
				"          created_by,",
				"          created_at,",
				"          modified_by,",
				"          modified_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"insert@existing select(mapColumn(",
				"          src_EmployeeID = EmployeeID,",
				"          src_Name = Name,",
				"          src_Gender = Gender,",
				"          src_DateOfBirth = DateOfBirth,",
				"          src_Department = Department,",
				"          src_JobTitle = JobTitle,",
				"          src_Salary = Salary,",
				"          src_HireDate = HireDate,",
				"          src_Address = Address,",
				"          src_Email = Email,",
				"          src_PhoneNumber = PhoneNumber,",
				"          src_MaritalStatus = MaritalStatus,",
				"          src_EffectiveDate = EffectiveDate,",
				"          src_EndDate = EndDate,",
				"          created_by,",
				"          created_at,",
				"          modified_by,",
				"          modified_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select3 derive(modified_by = 'I2025_MSyed',",
				"          modified_at = currentDate()) ~> derivedColumn3",
				"select4 derive(modified_at = toDate('')) ~> derivedColumn4",
				"derivedColumn1, derivedColumn3, derivedColumn4 union(byName: true)~> union1",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Prop_0 as string,",
				"          match_id as string,",
				"          date as string,",
				"          match_type as string,",
				"          event_name as string,",
				"          innings as string,",
				"          batting_team as string,",
				"          bowling_team as string,",
				"          over as string,",
				"          ball as string,",
				"          ball_no as string,",
				"          batter as string,",
				"          bat_pos as string,",
				"          runs_batter as string,",
				"          balls_faced as string,",
				"          bowler as string,",
				"          valid_ball as string,",
				"          runs_extras as string,",
				"          runs_total as string,",
				"          runs_bowler as string,",
				"          runs_not_boundary as string,",
				"          extra_type as string,",
				"          non_striker as string,",
				"          non_striker_pos as string,",
				"          wicket_kind as string,",
				"          player_out as string,",
				"          fielders as string,",
				"          runs_target as string,",
				"          review_batter as string,",
				"          team_reviewed as string,",
				"          review_decision as string,",
				"          umpire as string,",
				"          umpires_call as string,",
				"          player_of_match as string,",
				"          match_won_by as string,",
				"          win_outcome as string,",
				"          toss_winner as string,",
				"          toss_decision as string,",
				"          venue as string,",
				"          city as string,",
				"          day as string,",
				"          month as string,",
				"          year as string,",
				"          season as string,",
				"          gender as string,",
				"          team_type as string,",
				"          superover_winner as string,",
				"          result_type as string,",
				"          method as string,",
				"          balls_per_over as string,",
				"          overs as string,",
				"          event_match_no as string,",
				"          stage as string,",
				"          match_number as string,",
				"          team_runs as string,",
				"          team_balls as string,",
				"          team_wicket as string,",
				"          new_batter as string,",
				"          batter_runs as string,",
				"          batter_balls as string,",
				"          bowler_wicket as string,",
				"          batting_partners as string,",
				"          next_batter as string,",
				"          striker_out as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}