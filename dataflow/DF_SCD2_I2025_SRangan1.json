{
	"name": "DF_SCD2_I2025_SRangan1",
	"properties": {
		"folder": {
			"name": "TDSG Day 5 Training"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "empmastersource"
				},
				{
					"dataset": {
						"referenceName": "I2025_SRangan1",
						"type": "DatasetReference"
					},
					"name": "empmasterTarget"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "castinsrc"
				},
				{
					"name": "tgtcast"
				},
				{
					"name": "leftouterjoin"
				},
				{
					"name": "nullhandlingsrc"
				},
				{
					"name": "split1"
				},
				{
					"name": "tgtselect"
				},
				{
					"name": "split2"
				},
				{
					"name": "dcaudit"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "tgtdcaudit"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmployeeID as string,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as string,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as string,",
				"          HireDate as string,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as string,",
				"          EndDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> empmastersource",
				"source(output(",
				"          EmployeeID as string,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as date,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as integer,",
				"          HireDate as date,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as date,",
				"          EndDate as string,",
				"          createBy as string,",
				"          time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> empmasterTarget",
				"empmastersource derive(EmployeeID = toInteger(EmployeeID),",
				"          DateOfBirth = toDate(DateOfBirth, 'dd-MM-yyyy'),",
				"          Salary = toInteger(Salary),",
				"          HireDate = toDate(HireDate, 'dd-MM-yyyy'),",
				"          EffectiveDate = toDate(EffectiveDate, 'dd-MM-yyyy'),",
				"          EndDate = toDate(EndDate, 'dd-MM-yyyy')) ~> castinsrc",
				"empmasterTarget derive(EmployeeID = toInteger(EmployeeID),",
				"          EndDate = toDate(EndDate, 'yyyy-MM-dd')) ~> tgtcast",
				"nullhandlingsrc, tgtselect join(EmployeeID == {t.EmployeeID},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftouterjoin",
				"castinsrc derive(each(match(type == 'Integer'), $$ = iifNull($#, -1)),",
				"          each(match(type == 'Float'), $$ = iifNull($#, 0))) ~> nullhandlingsrc",
				"leftouterjoin split(isNull({t.EmployeeID}),",
				"     disjoint: false) ~> split1@(insert, update)",
				"tgtcast select(mapColumn(",
				"          {t.EmployeeID} = EmployeeID,",
				"          {t.Name} = Name,",
				"          {t.Gender} = Gender,",
				"          {t.DateOfBirth} = DateOfBirth,",
				"          {t.Department} = Department,",
				"          {t.JobTitle} = JobTitle,",
				"          {t.Salary} = Salary,",
				"          {t.HireDate} = HireDate,",
				"          {t.Address} = Address,",
				"          {t.Email} = Email,",
				"          {t.PhoneNumber} = PhoneNumber,",
				"          {t.MaritalStatus} = MaritalStatus,",
				"          {t.EffectiveDate} = EffectiveDate,",
				"          {t.EndDate} = EndDate,",
				"          {t.createBy} = createBy,",
				"          {t.time} = time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> tgtselect",
				"split1@update split((EmployeeID=={t.EmployeeID})&&(JobTitle!={t.JobTitle}||Salary!={t.Salary}),",
				"     disjoint: false) ~> split2@(updating, exisiting)",
				"split1@insert derive({t.createBy} = 'I2025_SRangan1',",
				"          {t.time} = currentTimestamp(),",
				"          flag = 'active') ~> dcaudit",
				"tgtdcaudit alterRow(updateIf((EmployeeID=={t.EmployeeID})&&(JobTitle!={t.JobTitle}||Salary!={t.Salary}))) ~> alterRow1",
				"split2@updating derive(modifiedby = 'I2025_SRangan1',",
				"          modified_date = currentTimestamp()) ~> tgtdcaudit"
			]
		}
	}
}