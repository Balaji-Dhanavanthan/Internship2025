{
	"name": "DF_SCD1_I2025SRangan1",
	"properties": {
		"folder": {
			"name": "DF_old_I2025_SRangan1"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Source_I2025_SRangan1",
						"type": "DatasetReference"
					},
					"name": "source"
				},
				{
					"dataset": {
						"referenceName": "DS_new_I2025_SRangan1",
						"type": "DatasetReference"
					},
					"name": "target"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "insertif"
				},
				{
					"name": "Upsertif"
				}
			],
			"scriptLines": [
				"source(output(",
				"          customer_id as short,",
				"          name as string,",
				"          email as string,",
				"          address as string,",
				"          phone as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source",
				"source(output(",
				"          customer_id as short,",
				"          name as string,",
				"          email as string,",
				"          address as string,",
				"          phone as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> target",
				"source, target join(source@customer_id == target@customer_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 alterRow(insertIf(isNull(target@customer_id))) ~> insertif",
				"join1 alterRow(upsertIf(target@customer_id==source@customer_id&&(source@phone!=target@phone))) ~> Upsertif",
				"Upsertif sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['scdnew.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1",
				"insertif sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink2"
			]
		}
	}
}