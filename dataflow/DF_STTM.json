{
	"name": "DF_STTM",
	"properties": {
		"folder": {
			"name": "STTM"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_onefile",
						"type": "DatasetReference"
					},
					"name": "phrmcy"
				},
				{
					"dataset": {
						"referenceName": "DS_onefile1",
						"type": "DatasetReference"
					},
					"name": "status"
				},
				{
					"dataset": {
						"referenceName": "DS_onefile2",
						"type": "DatasetReference"
					},
					"name": "language"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "Nullhandling"
				},
				{
					"name": "Leftjoin"
				},
				{
					"name": "leftjoins"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "Nullhandlings"
				},
				{
					"name": "select2"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select3"
				},
				{
					"name": "derivedColumn3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PHRMCY_NAT_PROV_ID_NBR as string,",
				"          PHRMCY_NCPDP_NBR as string,",
				"          PTNT_CD as string,",
				"          PSCB_FIRST_NM as string,",
				"          PSCB_LAST_NM as string,",
				"          LANG_CD as string,",
				"          DEAL_ID as string,",
				"          PHRMCY_NM as string,",
				"          PHRMCY_ST_ADDR_LINE1_TXT as string,",
				"          PHRMCY_ADDR_ZIP_CD as string,",
				"          PHRMCY_ADDR_CITY_NM as string,",
				"          PHRMCY_ADDR_ST_CD as string,",
				"          PHRMCY_ADDR_ST_NAME as string,",
				"          PHRMCY_ADDR_ZNE_CD as string,",
				"          PHRMCY_ADDR_ZNE_NM as string,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> phrmcy",
				"source(output(",
				"          deal_id as string,",
				"          deal_nbr as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> status",
				"source(output(",
				"          LANG_ID as short,",
				"          LANG_CD as string,",
				"          LANG_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> language",
				"phrmcy derive(PTNT_ID = toInteger(split(PTNT_CD, '_')[1]),",
				"          PTNT_CD = split(PTNT_CD, '_')[2],",
				"          PHRMCY_NAT_PROV_ID_NBR = iif(isNull(PHRMCY_NAT_PROV_ID_NBR) || PHRMCY_NAT_PROV_ID_NBR == 'NULL', 'UNK', PHRMCY_NAT_PROV_ID_NBR),",
				"          PHRMCY_NM = regexReplace(PHRMCY_NM, '[-&,\\']', ' '),",
				"          PHRMCY_ADDR_ST_NAME = initCap(PHRMCY_ADDR_ST_NAME),",
				"          PHRMCY_ADDR_ZNE_NM = initCap(PHRMCY_ADDR_ZNE_NM),",
				"          PHRMCY_ADDR_ZIP_CD = iif(PHRMCY_ADDR_ZIP_CD == 'NULL', 'NULL', lpad(PHRMCY_ADDR_ZIP_CD, 5, '0')),",
				"          PSCB_EMAIL_ID = concat(\r",
				"    left(trim(PSCB_FIRST_NM), toInteger(round(length(trim(PSCB_FIRST_NM)) * 1/2))),\r",
				"    left(trim(PSCB_LAST_NM), 1),\r",
				"    '@UN.com'\r",
				"),",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT = toString(toDate(PHRMCY_SYS_IVR_DTA_STRT_DT,'dd-MM-yyyy'),'dd-MMM-yyyy'),",
				"          PHRMCY_SYS_IVR_DTA_STRT_QTR = concat(iif(month(toDate(PHRMCY_SYS_IVR_DTA_STRT_DT, 'dd-MM-yyyy')) <= 3, 'Q1',\r",
				"           iif(month(toDate(PHRMCY_SYS_IVR_DTA_STRT_DT, 'dd-MM-yyyy')) <= 6, 'Q2',\r",
				"               iif(month(toDate(PHRMCY_SYS_IVR_DTA_STRT_DT, 'dd-MM-yyyy')) <= 9, 'Q3', 'Q4'))), \r",
				"       '-', \r",
				"       toString(year(toDate(PHRMCY_SYS_IVR_DTA_STRT_DT, 'dd-MM-yyyy')))),",
				"          PHRMCY_SYS_IVR_DTA_STRT_YR = toString(year(toDate(PHRMCY_SYS_IVR_DTA_STRT_DT, 'dd-MM-yyyy'))),",
				"          PHRMCY_AGE = year(currentDate()) - year(toDate(PHRMCY_SYS_IVR_DTA_STRT_DT, 'dd-MM-yyyy')),",
				"          PHRMCY_ADDR_CITY_NM = iif(PHRMCY_ADDR_CITY_NM == 'NULL', 'UNK',\r",
				"    iif(size(split(trim(PHRMCY_ADDR_CITY_NM), ' ')) > 1,\r",
				"        concat(\r",
				"            upper(left(at(split(trim(PHRMCY_ADDR_CITY_NM), ' '), 1), 1)),\r",
				"            upper(left(at(split(trim(PHRMCY_ADDR_CITY_NM), ' '), 2), 1))\r",
				"        ),\r",
				"        upper(substring(trim(PHRMCY_ADDR_CITY_NM), 1, 3))\r",
				"    )\r",
				")) ~> derivedColumn1",
				"derivedColumn1 derive(each(match(type=='string'), $$ = coalesce($$,'UNK')),",
				"          each(match(type=='integer'), $$ = coalesce($$,-1)),",
				"          each(match(type=='date'), $$ = coalesce($$,'2999-12-31'))) ~> Nullhandling",
				"Nullhandling, status join(Nullhandling@DEAL_ID == status@deal_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> Leftjoin",
				"Leftjoin, language join(Nullhandling@LANG_CD == language@LANG_CD,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftjoins",
				"leftjoins derive(DEAL_TYPE_CD = substring(deal_nbr,1,2),",
				"          DEAL_NUMBER = substring(deal_nbr,3,length(deal_nbr)),",
				"          RCD_CRT_TMS = currentDate(),",
				"          RCD_MOD_TMS = toDate('','dd-MM-yyyy'),",
				"          START_DATE = currentDate(),",
				"          END_DATE = toDate('','dd-MM-yyyy'),",
				"          DEAL_ID = iif(Nullhandling@DEAL_ID == status@deal_id || Nullhandling@DEAL_ID == deal_nbr, 'exist', 'not exist')) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          PTNT_ID,",
				"          PTNT_CD,",
				"          PHRMCY_NCPDP_NBR,",
				"          PHRMCY_NAT_PROV_ID_NBR,",
				"          PSCB_FIRST_NM,",
				"          PSCB_LAST_NM,",
				"          PHRMCY_ADDR_CITY_NM,",
				"          PHRMCY_ADDR_ST_NM = PHRMCY_ADDR_ST_NAME,",
				"          PHRMCY_ADDR_ZNE_NM,",
				"          PHRMCY_ADDR_ZIP_CD,",
				"          PSCB_EMAIL_ID,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT,",
				"          PHRMCY_SYS_IVR_DTA_STRT_QTR,",
				"          PHRMCY_SYS_IVR_DTA_STRT_YR,",
				"          PHRMCY_AGE,",
				"          DEAL_ID = Nullhandling@DEAL_ID,",
				"          DEAL_TYPE_CD,",
				"          DEAL_NUMBER,",
				"          LANG_CD = Nullhandling@LANG_CD,",
				"          LANG_DESC,",
				"          RCD_CRT_TMS,",
				"          RCD_MOD_TMS,",
				"          START_DATE,",
				"          PHRMCY_NM,",
				"          END_DATE,",
				"          PHRMCY_ST_ADDR_LINE1_TXT,",
				"          PHRMCY_ADDR_ST_CD,",
				"          PHRMCY_ADDR_ZNE_CD,",
				"          LANG_ID,",
				"          LANG_CD = language@LANG_CD",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 filter(equals(PHRMCY_ADDR_ZNE_CD, 'US') || equals(PHRMCY_ADDR_ZNE_CD, 'PR')) ~> filter1",
				"filter1 derive(each(match(type=='string'), $$ = coalesce($$,'UNK')),",
				"          each(match(type=='integer'), $$ = coalesce($$,-1)),",
				"          each(match(type=='date'), $$ = coalesce($$,toDate('2999-12-31','yyyy-MM-dd')))) ~> Nullhandlings",
				"Nullhandlings select(mapColumn(",
				"          PTNT_ID,",
				"          PTNT_CD,",
				"          PHRMCY_NCPDP_NBR,",
				"          PHRMCY_NAT_PROV_ID_NBR,",
				"          PSCB_FIRST_NM,",
				"          PSCB_LAST_NM,",
				"          PHRMCY_ADDR_CITY_NM,",
				"          PHRMCY_ADDR_ST_NM,",
				"          PHRMCY_ADDR_ZNE_NM,",
				"          PHRMCY_ADDR_ZIP_CD,",
				"          PSCB_EMAIL_ID,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT,",
				"          PHRMCY_SYS_IVR_DTA_STRT_QTR,",
				"          PHRMCY_SYS_IVR_DTA_STRT_YR,",
				"          PHRMCY_AGE,",
				"          DEAL_ID,",
				"          DEAL_TYPE_CD,",
				"          DEAL_NUMBER,",
				"          LANG_CD,",
				"          LANG_DESC,",
				"          RCD_CRT_TMS,",
				"          RCD_MOD_TMS,",
				"          START_DATE,",
				"          PHRMCY_NM,",
				"          END_DATE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select2 keyGenerate(output(PTNT_KEY as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 select(mapColumn(",
				"          PTNT_KEY,",
				"          PTNT_ID,",
				"          PTNT_CD,",
				"          PHRMCY_NCPDP_NBR,",
				"          PHRMCY_NAT_PROV_ID_NBR,",
				"          PSCB_FIRST_NM,",
				"          PSCB_LAST_NM,",
				"          PHRMCY_ADDR_CITY_NM,",
				"          PHRMCY_ADDR_ST_NM,",
				"          PHRMCY_ADDR_ZNE_NM,",
				"          PHRMCY_ADDR_ZIP_CD,",
				"          PSCB_EMAIL_ID,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT,",
				"          PHRMCY_SYS_IVR_DTA_STRT_QTR,",
				"          PHRMCY_SYS_IVR_DTA_STRT_YR,",
				"          PHRMCY_AGE,",
				"          DEAL_ID,",
				"          DEAL_TYPE_CD,",
				"          DEAL_NUMBER,",
				"          LANG_CD,",
				"          LANG_DESC,",
				"          RCD_CRT_TMS,",
				"          RCD_MOD_TMS,",
				"          START_DATE,",
				"          PHRMCY_NM,",
				"          END_DATE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select3 derive(PHRMCY_ADDR_ZIP_CD = iif(PHRMCY_ADDR_ZIP_CD == 'NULL', 'UNK',PHRMCY_ADDR_ZIP_CD )) ~> derivedColumn3",
				"derivedColumn3 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Prop_0 as string,",
				"          match_id as string,",
				"          date as string,",
				"          match_type as string,",
				"          event_name as string,",
				"          innings as string,",
				"          batting_team as string,",
				"          bowling_team as string,",
				"          over as string,",
				"          ball as string,",
				"          ball_no as string,",
				"          batter as string,",
				"          bat_pos as string,",
				"          runs_batter as string,",
				"          balls_faced as string,",
				"          bowler as string,",
				"          valid_ball as string,",
				"          runs_extras as string,",
				"          runs_total as string,",
				"          runs_bowler as string,",
				"          runs_not_boundary as string,",
				"          extra_type as string,",
				"          non_striker as string,",
				"          non_striker_pos as string,",
				"          wicket_kind as string,",
				"          player_out as string,",
				"          fielders as string,",
				"          runs_target as string,",
				"          review_batter as string,",
				"          team_reviewed as string,",
				"          review_decision as string,",
				"          umpire as string,",
				"          umpires_call as string,",
				"          player_of_match as string,",
				"          match_won_by as string,",
				"          win_outcome as string,",
				"          toss_winner as string,",
				"          toss_decision as string,",
				"          venue as string,",
				"          city as string,",
				"          day as string,",
				"          month as string,",
				"          year as string,",
				"          season as string,",
				"          gender as string,",
				"          team_type as string,",
				"          superover_winner as string,",
				"          result_type as string,",
				"          method as string,",
				"          balls_per_over as string,",
				"          overs as string,",
				"          event_match_no as string,",
				"          stage as string,",
				"          match_number as string,",
				"          team_runs as string,",
				"          team_balls as string,",
				"          team_wicket as string,",
				"          new_batter as string,",
				"          batter_runs as string,",
				"          batter_balls as string,",
				"          bowler_wicket as string,",
				"          batting_partners as string,",
				"          next_batter as string,",
				"          striker_out as string",
				"     ),",
				"     partitionFileNames:['DIM_PTNT_src.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}