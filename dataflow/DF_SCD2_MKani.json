{
	"name": "DF_SCD2_MKani",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "split1"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "union1"
				},
				{
					"name": "union2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Employee_ID as short,",
				"          First_Name as string,",
				"          Last_Name as string,",
				"          Salary as integer,",
				"          Created_date as string,",
				"          Update_date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          Employee_ID as short,",
				"          First_Name as string,",
				"          Last_Name as string,",
				"          Salary as integer,",
				"          Created_date as string,",
				"          Update_date as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1, source2 join(source1@Employee_ID == source2@Employee_ID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"select1 split(!isNull(Employee_ID_tgt) && (Salary!=Salary_tgt),",
				"     isNull(Employee_ID_tgt),",
				"     disjoint: false) ~> split1@(update, insert, default)",
				"join1 select(mapColumn(",
				"          Employee_ID = source1@Employee_ID,",
				"          First_Name = source1@First_Name,",
				"          Last_Name = source1@Last_Name,",
				"          Salary = source1@Salary,",
				"          Created_date = source1@Created_date,",
				"          Update_date = source1@Update_date,",
				"          Employee_ID_tgt = source2@Employee_ID,",
				"          First_Name_tgt = source2@First_Name,",
				"          Last_Name_tgt = source2@Last_Name,",
				"          Salary_tgt = source2@Salary,",
				"          Created_date_tgt = source2@Created_date,",
				"          Update_date_tgt = source2@Update_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"split1@update select(mapColumn(",
				"          Employee_ID_tgt,",
				"          First_Name_tgt,",
				"          Last_Name_tgt,",
				"          Salary,",
				"          Created_date_tgt,",
				"          Update_date_tgt",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"split1@insert select(mapColumn(",
				"          Employee_ID,",
				"          First_Name,",
				"          Last_Name,",
				"          Salary,",
				"          Created_date,",
				"          Update_date",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"split1@default select(mapColumn(",
				"          Employee_ID_tgt,",
				"          First_Name_tgt,",
				"          Last_Name_tgt,",
				"          Salary_tgt,",
				"          Created_date_tgt,",
				"          Update_date_tgt",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select2, select3 union(byName: true)~> union1",
				"union1, select4 union(byName: true)~> union2",
				"union2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Prop_0 as string,",
				"          match_id as string,",
				"          date as string,",
				"          match_type as string,",
				"          event_name as string,",
				"          innings as string,",
				"          batting_team as string,",
				"          bowling_team as string,",
				"          over as string,",
				"          ball as string,",
				"          ball_no as string,",
				"          batter as string,",
				"          bat_pos as string,",
				"          runs_batter as string,",
				"          balls_faced as string,",
				"          bowler as string,",
				"          valid_ball as string,",
				"          runs_extras as string,",
				"          runs_total as string,",
				"          runs_bowler as string,",
				"          runs_not_boundary as string,",
				"          extra_type as string,",
				"          non_striker as string,",
				"          non_striker_pos as string,",
				"          wicket_kind as string,",
				"          player_out as string,",
				"          fielders as string,",
				"          runs_target as string,",
				"          review_batter as string,",
				"          team_reviewed as string,",
				"          review_decision as string,",
				"          umpire as string,",
				"          umpires_call as string,",
				"          player_of_match as string,",
				"          match_won_by as string,",
				"          win_outcome as string,",
				"          toss_winner as string,",
				"          toss_decision as string,",
				"          venue as string,",
				"          city as string,",
				"          day as string,",
				"          month as string,",
				"          year as string,",
				"          season as string,",
				"          gender as string,",
				"          team_type as string,",
				"          superover_winner as string,",
				"          result_type as string,",
				"          method as string,",
				"          balls_per_over as string,",
				"          overs as string,",
				"          event_match_no as string,",
				"          stage as string,",
				"          match_number as string,",
				"          team_runs as string,",
				"          team_balls as string,",
				"          team_wicket as string,",
				"          new_batter as string,",
				"          batter_runs as string,",
				"          batter_balls as string,",
				"          bowler_wicket as string,",
				"          batting_partners as string,",
				"          next_batter as string,",
				"          striker_out as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}