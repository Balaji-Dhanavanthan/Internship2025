{
	"name": "DF_STTM_Fact",
	"properties": {
		"folder": {
			"name": "Day9"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Fact_STTM_SRC",
						"type": "DatasetReference"
					},
					"name": "year"
				},
				{
					"dataset": {
						"referenceName": "DS_Fact_STTM_SRC",
						"type": "DatasetReference"
					},
					"name": "phrmcy"
				},
				{
					"dataset": {
						"referenceName": "DS_Fact_STTM_SRC",
						"type": "DatasetReference"
					},
					"name": "ptnt"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_CSV_Sink",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "yearName"
				},
				{
					"name": "phrmcyName"
				},
				{
					"name": "ptntName"
				},
				{
					"name": "emptyValuetoNull"
				},
				{
					"name": "DCTransition"
				},
				{
					"name": "filter1"
				},
				{
					"name": "typeCast"
				},
				{
					"name": "PTNTCOPAYAMT"
				},
				{
					"name": "SLSTAXAMT"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "select1"
				},
				{
					"name": "Nullhandling"
				}
			],
			"scriptLines": [
				"source(output(",
				"          YEAR_ID as string,",
				"          YEAR_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> year",
				"source(output(",
				"          PHRMCY_NAT_PROV_ID_NBR as string,",
				"          PHRMCY_NCPDP_NBR as string,",
				"          PTNT_CD as string,",
				"          PSCB_FIRST_NM as string,",
				"          PSCB_LAST_NM as string,",
				"          LANG_CD as string,",
				"          DEAL_ID as string,",
				"          PHRMCY_NM as string,",
				"          PHRMCY_ST_ADDR_LINE1_TXT as string,",
				"          PHRMCY_ADDR_ZIP_CD as string,",
				"          PHRMCY_ADDR_CITY_NM as string,",
				"          PHRMCY_ADDR_ST_CD as string,",
				"          PHRMCY_ADDR_ST_NAME as string,",
				"          PHRMCY_ADDR_ZNE_CD as string,",
				"          PHRMCY_ADDR_ZNE_NM as string,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> phrmcy",
				"source(output(",
				"          DOC_ID as string,",
				"          DOC_VER as string,",
				"          SFTWR_VENDR as string,",
				"          PHRMCY_NCPDP_ID as string,",
				"          PHRMCY_NAT_PROV_ID_NBR as string,",
				"          PTNT_CD as string,",
				"          PTNT_YR_OF_BRTH as string,",
				"          PTNT_GNDR as string,",
				"          PTNT_ZIP_CD as string,",
				"          PTNT_LANG_CD as string,",
				"          PTNT_LOC_CD as string,",
				"          NURSING_HOME_FAC_NM as string,",
				"          RX_ENROLL_IN_AUTOFILL as string,",
				"          RX_ENROLL_IN_RFIL as string,",
				"          RX_ENROLL_IN_CNTR_FILL as string,",
				"          PSCB_NPI as string,",
				"          PSCB_DEA_ID as string,",
				"          PSCB_ST_LIC_ID as string,",
				"          PSCB_LAST_NM as string,",
				"          PSCB_FIRST_NM as string,",
				"          OUT_PSCB_ZIP_CD as string,",
				"          RX_NBR as string,",
				"          TRANS_NBR as string,",
				"          RX_TYP as string,",
				"          DT_WRT as string,",
				"          DT_FILL as string,",
				"          TM_FILL as string,",
				"          OUT_MTRC_DSPN_QTY as string,",
				"          DAY_SPLY as string,",
				"          FILL_NBR as string,",
				"          RFIL_ORIGLY_AUTH as string,",
				"          RFIL_RMN as string,",
				"          DAW_CD as string,",
				"          OUT_INV_QTY_AFT_FILL as string,",
				"          PRC_OVRD as string,",
				"          DLV as string,",
				"          CMPND_IND as string,",
				"          PROD_ID as string,",
				"          RX_ORIG_IND as string,",
				"          PMT_TYP as string,",
				"          BAS_OF_INGRD_CST_REIMB as string,",
				"          REIMB_AMT as string,",
				"          COPAY_AMT as string,",
				"          INGRD_CST_AMT as string,",
				"          OUT_TOT_AMT_PD_BY_PTNT as string,",
				"          TOT_RX_PRC_COLL as string,",
				"          OUT_DSPN_FEE_PD as string,",
				"          COGS_AMT as string,",
				"          USUAL_AND_CSTMARY as string,",
				"          OUT_AWP_AMT as string,",
				"          OUT_DCT_AMT as string,",
				"          OUT_SLS_TAX as string,",
				"          PTY3_BIN as string,",
				"          PTY3_PCN as string,",
				"          PLN_ID as string,",
				"          GRP_ID as string,",
				"          NTWK_REIMB_ID as string,",
				"          PAYR_ID_QLFY as string,",
				"          PAYR_ID as string,",
				"          PTY3_CLM_REF_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ptnt",
				"ptntName, phrmcyName join({p.PTNT_CD} == {ph.PTNT_CD},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, yearName join({p.PTNT_YR_OF_BRTH} == {y.YEAR_ID},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"ptnt derive(each(match(type=='string'), $$ = case($$=='NULL', toString(null()), $$))) ~> derivedColumn1",
				"phrmcy derive(each(match(type=='string'), $$ = case($$=='NULL', toString(null()), $$))) ~> derivedColumn2",
				"year derive(each(match(type=='string'), $$ = case($$=='NULL', toString(null()), $$))) ~> derivedColumn3",
				"derivedColumn3 select(mapColumn(",
				"          {y.YEAR_ID} = YEAR_ID,",
				"          {y.YEAR_DESC} = YEAR_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> yearName",
				"derivedColumn2 select(mapColumn(",
				"          {ph.PHRMCY_NAT_PROV_ID_NBR} = PHRMCY_NAT_PROV_ID_NBR,",
				"          {ph.PHRMCY_NCPDP_NBR} = PHRMCY_NCPDP_NBR,",
				"          {ph.PTNT_CD} = PTNT_CD,",
				"          {ph.PSCB_FIRST_NM} = PSCB_FIRST_NM,",
				"          {ph.PSCB_LAST_NM} = PSCB_LAST_NM,",
				"          {ph.LANG_CD} = LANG_CD,",
				"          {ph.DEAL_ID} = DEAL_ID,",
				"          {ph.PHRMCY_NM} = PHRMCY_NM,",
				"          {ph.PHRMCY_ST_ADDR_LINE1_TXT} = PHRMCY_ST_ADDR_LINE1_TXT,",
				"          {ph.PHRMCY_ADDR_ZIP_CD} = PHRMCY_ADDR_ZIP_CD,",
				"          {ph.PHRMCY_ADDR_CITY_NM} = PHRMCY_ADDR_CITY_NM,",
				"          {ph.PHRMCY_ADDR_ST_CD} = PHRMCY_ADDR_ST_CD,",
				"          {ph.PHRMCY_ADDR_ST_NAME} = PHRMCY_ADDR_ST_NAME,",
				"          {ph.PHRMCY_ADDR_ZNE_CD} = PHRMCY_ADDR_ZNE_CD,",
				"          {ph.PHRMCY_ADDR_ZNE_NM} = PHRMCY_ADDR_ZNE_NM,",
				"          {ph.PHRMCY_SYS_IVR_DTA_STRT_DT} = PHRMCY_SYS_IVR_DTA_STRT_DT",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> phrmcyName",
				"derivedColumn1 select(mapColumn(",
				"          each(match(/* All input columns */ true()),",
				"               /* Input name */ concat('p.',$$) = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ptntName",
				"filter1 derive(each(match(type=='string'), $$ = case(trim($$)=='',toString(null()) ,$$))) ~> emptyValuetoNull",
				"typeCast derive({s.TRANS_NBR} = {p.TRANS_NBR},",
				"          {s.PTNT_CD} = substringIndex({ph.PTNT_CD}, '_', -1),",
				"          {s.PTNT_NM} = regexReplace({ph.PHRMCY_NM}, \"[,&'-]\", ' '),",
				"          {s.PTNT_YR_OF_BRTH} = {p.PTNT_YR_OF_BRTH},",
				"          {s.PTNT_AGE} = minus( year(currentTimestamp()),{p.PTNT_YR_OF_BRTH} ),",
				"          {s.PTNT_GNDR} = case({p.PTNT_GNDR}=='M', 'Male',{p.PTNT_GNDR}=='F', 'Female','UNK'),",
				"          {s.TRANS_DATE} = toDate(toString({p.DT_WRT}),'yyyyMMdd'),",
				"          {s.PROD_ID} = {p.PROD_ID},",
				"          {s.PROD_GROUP_ID} = concat(left(trim({p.GRP_ID}),2), right(trim({p.GRP_ID}),2)),",
				"          {s.PAYMENT_TYPE} = case({p.PMT_TYP}==1, 'On-Line',{p.PMT_TYP}==2, 'Cash', 'Others'),",
				"          {s.COGS_AMT} = {p.COGS_AMT}/100,",
				"          {s.REIMB_AMT} = add({p.COGS_AMT},{p.REIMB_AMT}),",
				"          {s.TOTAL_AMT(COL 3)} = {p.COGS_AMT}*{p.REIMB_AMT},",
				"          {s.INGRD_CST_AMT} = {p.INGRD_CST_AMT}/100,",
				"          {s.FILLED_DATE} = toDate(toString({p.DT_FILL}),'yyyyMMdd'),",
				"          {s.PAYR_CNTRCT_FLG} = case(toDecimal({p.TOT_RX_PRC_COLL})>{p.USUAL_AND_CSTMARY}, 'Y', 'N'),",
				"          {s.YEAR_DESC} = right({y.YEAR_DESC}, 4)) ~> DCTransition",
				"join2 filter(isNull({ph.PHRMCY_NAT_PROV_ID_NBR})) ~> filter1",
				"emptyValuetoNull derive({p.TRANS_NBR} = toInteger({p.TRANS_NBR}),",
				"          {p.PTNT_YR_OF_BRTH} = toInteger({p.PTNT_YR_OF_BRTH}),",
				"          {p.DT_WRT} = toInteger({p.DT_WRT}),",
				"          {p.PMT_TYP} = toInteger({p.PMT_TYP}),",
				"          {p.COGS_AMT} = toFloat({p.COGS_AMT}),",
				"          {p.REIMB_AMT} = toDecimal({p.REIMB_AMT}, 12, 2),",
				"          {p.COPAY_AMT} = toDecimal({p.COPAY_AMT}, 12, 2),",
				"          {p.INGRD_CST_AMT} = toDecimal({p.INGRD_CST_AMT}, 12, 2),",
				"          {p.DT_FILL} = toInteger({p.DT_FILL}),",
				"          {p.USUAL_AND_CSTMARY} = toDecimal({p.USUAL_AND_CSTMARY}, 12, 2)) ~> typeCast",
				"DCTransition window(over(PROD_ID = {p.PROD_ID}),",
				"     asc({p.PROD_ID}, true),",
				"     {s.PTNT_COPAY_AMT(COL1)} = avg({p.COPAY_AMT})) ~> PTNTCOPAYAMT",
				"PTNTCOPAYAMT window(over({s.PTNT_COPAY_AMT(COL1)}),",
				"     asc({s.PTNT_COPAY_AMT(COL1)}, true),",
				"     {s.SLS_TAX_AMT(COL2)} = max({s.PTNT_COPAY_AMT(COL1)})) ~> SLSTAXAMT",
				"SLSTAXAMT derive({s.DCT_AMT} = case({s.PTNT_COPAY_AMT(COL1)}>0, ({s.PTNT_COPAY_AMT(COL1)}/{s.TOTAL_AMT(COL 3)}),toDecimal(( 0.20*{s.TOTAL_AMT(COL 3)}),12,2))) ~> derivedColumn4",
				"derivedColumn4 select(mapColumn(",
				"          TRANS_NBR = {s.TRANS_NBR},",
				"          PTNT_CD = {s.PTNT_CD},",
				"          PTNT_NM = {s.PTNT_NM},",
				"          PTNT_YR_OF_BRTH = {s.PTNT_YR_OF_BRTH},",
				"          PTNT_AGE = {s.PTNT_AGE},",
				"          PTNT_GNDR = {s.PTNT_GNDR},",
				"          TRANS_DATE = {s.TRANS_DATE},",
				"          PROD_ID = {s.PROD_ID},",
				"          PROD_GROUP_ID = {s.PROD_GROUP_ID},",
				"          PAYMENT_TYPE = {s.PAYMENT_TYPE},",
				"          COGS_AMT = {s.COGS_AMT},",
				"          REIMB_AMT = {s.REIMB_AMT},",
				"          {TOTAL_AMT(COL 3)} = {s.TOTAL_AMT(COL 3)},",
				"          INGRD_CST_AMT = {s.INGRD_CST_AMT},",
				"          FILLED_DATE = {s.FILLED_DATE},",
				"          PAYR_CNTRCT_FLG = {s.PAYR_CNTRCT_FLG},",
				"          YEAR_DESC = {s.YEAR_DESC},",
				"          {PTNT_COPAY_AMT(COL1)} = {s.PTNT_COPAY_AMT(COL1)},",
				"          {SLS_TAX_AMT(COL2)} = {s.SLS_TAX_AMT(COL2)},",
				"          DCT_AMT = {s.DCT_AMT}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(each(match(type=='string'), $$ = iif(isNull($$),'UNK',$$)),",
				"          LOAD_DATE = currentTimestamp(),",
				"          each(match(type=='integer'), $$ = iif(isNull($$),-1 , $$)),",
				"          each(match(type=='decimal'), $$ = iif(isNull($$),toDecimal(-1.00,12,2) ,toDecimal($$,12,2))),",
				"          each(match(type=='stort'), $$ = iif(isNull($$),toFloat(-1.00) ,toFloat($$)))) ~> Nullhandling",
				"Nullhandling sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['factSource.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}