{
	"name": "DF_SCD_2",
	"properties": {
		"folder": {
			"name": "df_scd2"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "source"
				},
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "Target"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "SOURCEone"
				},
				{
					"name": "TARGETone"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "union1"
				},
				{
					"name": "derivedColumn3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmployeeID as string,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as string,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as string,",
				"          HireDate as string,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as string,",
				"          EndDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source",
				"source(output(",
				"          EmployeeID as string,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as string,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as string,",
				"          HireDate as string,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as string,",
				"          EndDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Target",
				"SOURCEone, TARGETone join(SOURCEone@EmployeeID == TARGETone@EmployeeID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"source derive(EmployeeID = toInteger(EmployeeID),",
				"          DateOfBirth = toDate(DateOfBirth,'dd-MM-yyyy'),",
				"          Salary = toInteger(Salary),",
				"          HireDate = toDate(HireDate,'dd-MM-yyyy'),",
				"          EffectiveDate = toDate(EffectiveDate,'dd-MM-yyyy'),",
				"          EndDate = toDate(EndDate,'dd-MM-yyyy')) ~> SOURCEone",
				"Target derive(EmployeeID = toInteger(EmployeeID),",
				"          DateOfBirth = toDate(DateOfBirth,'yyyy-MM-dd'),",
				"          Salary = toInteger(Salary),",
				"          HireDate = toDate(HireDate,'yyyy-MM-dd'),",
				"          EffectiveDate = toDate(EffectiveDate,'yyyy-MM-dd'),",
				"          EndDate = toDate(EndDate,'yyyy-MM-dd'),",
				"          created_at = currentDate(),",
				"          created_by = 'aabidh',",
				"          modified_at = '',",
				"          modified_by = '',",
				"          flag = 1) ~> TARGETone",
				"join1 split(isNull(TARGETone@EmployeeID),",
				"     SOURCEone@EmployeeID == TARGETone@EmployeeID && (source@Department != Target@Department || source@JobTitle != Target@JobTitle || SOURCEone@Salary != TARGETone@Salary || source@MaritalStatus != Target@MaritalStatus),",
				"     disjoint: false) ~> split1@(INSERT, updates, existing)",
				"split1@updates derive(modified_at = currentDate(),",
				"          modified_by = 'asrar') ~> derivedColumn1",
				"split1@INSERT derive(created_at = currentDate(),",
				"          created_by = 'aabidh',",
				"          modified_at = toDate('')) ~> derivedColumn2",
				"derivedColumn2 select(mapColumn(",
				"          EmployeeID = split1@INSERT@EmployeeID,",
				"          Name = split1@INSERT@Name,",
				"          Gender = split1@INSERT@Gender,",
				"          DateOfBirth = split1@INSERT@DateOfBirth,",
				"          Department = split1@INSERT@Department,",
				"          JobTitle = split1@INSERT@JobTitle,",
				"          Salary = split1@INSERT@Salary,",
				"          HireDate = split1@INSERT@HireDate,",
				"          Address = split1@INSERT@Address,",
				"          Email = split1@INSERT@Email,",
				"          PhoneNumber = split1@INSERT@PhoneNumber,",
				"          MaritalStatus = split1@INSERT@MaritalStatus,",
				"          EffectiveDate = split1@INSERT@EffectiveDate,",
				"          EndDate = split1@INSERT@EndDate,",
				"          created_at,",
				"          created_by,",
				"          modified_at,",
				"          modified_by",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn1 select(mapColumn(",
				"          EmployeeID = split1@updates@EmployeeID,",
				"          Name = split1@updates@Name,",
				"          Gender = split1@updates@Gender,",
				"          DateOfBirth = split1@updates@DateOfBirth,",
				"          Department = split1@updates@Department,",
				"          JobTitle = split1@updates@JobTitle,",
				"          Salary = split1@updates@Salary,",
				"          HireDate = split1@updates@HireDate,",
				"          Address = split1@updates@Address,",
				"          Email = split1@updates@Email,",
				"          PhoneNumber = split1@updates@PhoneNumber,",
				"          MaritalStatus = split1@updates@MaritalStatus,",
				"          EffectiveDate = split1@updates@EffectiveDate,",
				"          EndDate = split1@updates@EndDate,",
				"          created_at,",
				"          created_by,",
				"          modified_at,",
				"          modified_by",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"derivedColumn3 select(mapColumn(",
				"          EmployeeID = split1@existing@EmployeeID,",
				"          Name = split1@existing@Name,",
				"          Gender = split1@existing@Gender,",
				"          DateOfBirth = split1@existing@DateOfBirth,",
				"          Department = split1@existing@Department,",
				"          JobTitle = split1@existing@JobTitle,",
				"          Salary = split1@existing@Salary,",
				"          HireDate = split1@existing@HireDate,",
				"          Address = split1@existing@Address,",
				"          Email = split1@existing@Email,",
				"          PhoneNumber = split1@existing@PhoneNumber,",
				"          MaritalStatus = split1@existing@MaritalStatus,",
				"          EffectiveDate = split1@existing@EffectiveDate,",
				"          EndDate = split1@existing@EndDate,",
				"          created_at,",
				"          created_by,",
				"          modified_at,",
				"          modified_by",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select1, select2, select3 union(byName: true)~> union1",
				"split1@existing derive(modified_at = toDate('')) ~> derivedColumn3",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Prop_0 as string,",
				"          match_id as string,",
				"          date as string,",
				"          match_type as string,",
				"          event_name as string,",
				"          innings as string,",
				"          batting_team as string,",
				"          bowling_team as string,",
				"          over as string,",
				"          ball as string,",
				"          ball_no as string,",
				"          batter as string,",
				"          bat_pos as string,",
				"          runs_batter as string,",
				"          balls_faced as string,",
				"          bowler as string,",
				"          valid_ball as string,",
				"          runs_extras as string,",
				"          runs_total as string,",
				"          runs_bowler as string,",
				"          runs_not_boundary as string,",
				"          extra_type as string,",
				"          non_striker as string,",
				"          non_striker_pos as string,",
				"          wicket_kind as string,",
				"          player_out as string,",
				"          fielders as string,",
				"          runs_target as string,",
				"          review_batter as string,",
				"          team_reviewed as string,",
				"          review_decision as string,",
				"          umpire as string,",
				"          umpires_call as string,",
				"          player_of_match as string,",
				"          match_won_by as string,",
				"          win_outcome as string,",
				"          toss_winner as string,",
				"          toss_decision as string,",
				"          venue as string,",
				"          city as string,",
				"          day as string,",
				"          month as string,",
				"          year as string,",
				"          season as string,",
				"          gender as string,",
				"          team_type as string,",
				"          superover_winner as string,",
				"          result_type as string,",
				"          method as string,",
				"          balls_per_over as string,",
				"          overs as string,",
				"          event_match_no as string,",
				"          stage as string,",
				"          match_number as string,",
				"          team_runs as string,",
				"          team_balls as string,",
				"          team_wicket as string,",
				"          new_batter as string,",
				"          batter_runs as string,",
				"          batter_balls as string,",
				"          bowler_wicket as string,",
				"          batting_partners as string,",
				"          next_batter as string,",
				"          striker_out as string",
				"     ),",
				"     partitionFileNames:['target.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}