{
	"name": "DF_STTM_DIM_TGT",
	"properties": {
		"folder": {
			"name": "TDSG_ADF_DataFlow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "phrmcysrc"
				},
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "langsrc"
				},
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "statussrc"
				},
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "DIMTGT"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "PhrmcyDerived"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "select1"
				},
				{
					"name": "Transformation"
				},
				{
					"name": "NullHandling"
				},
				{
					"name": "FiltUsPr"
				},
				{
					"name": "SelReqCol"
				},
				{
					"name": "AuditColumns"
				},
				{
					"name": "joinswithtarget"
				},
				{
					"name": "TargetDerived"
				},
				{
					"name": "INSERT"
				},
				{
					"name": "AuditColumn"
				},
				{
					"name": "SelectingSrcColumns"
				},
				{
					"name": "UpdateAuditColumns"
				},
				{
					"name": "UpdateSelection"
				},
				{
					"name": "ExistingAuditColumn"
				},
				{
					"name": "ExtistingSelection"
				},
				{
					"name": "CombiningRows"
				},
				{
					"name": "FinalSelection"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "HistoryRecord"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PHRMCY_NAT_PROV_ID_NBR as string,",
				"          PHRMCY_NCPDP_NBR as string,",
				"          PTNT_CD as string,",
				"          PSCB_FIRST_NM as string,",
				"          PSCB_LAST_NM as string,",
				"          LANG_CD as string,",
				"          DEAL_ID as string,",
				"          PHRMCY_NM as string,",
				"          PHRMCY_ST_ADDR_LINE1_TXT as string,",
				"          PHRMCY_ADDR_ZIP_CD as string,",
				"          PHRMCY_ADDR_CITY_NM as string,",
				"          PHRMCY_ADDR_ST_CD as string,",
				"          PHRMCY_ADDR_ST_NAME as string,",
				"          PHRMCY_ADDR_ZNE_CD as string,",
				"          PHRMCY_ADDR_ZNE_NM as string,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> phrmcysrc",
				"source(output(",
				"          LANG_ID as string,",
				"          LANG_CD as string,",
				"          LANG_DESC as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> langsrc",
				"source(output(",
				"          deal_id as string,",
				"          deal_nbr as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> statussrc",
				"source(output(",
				"          PTNT_KEY as string,",
				"          PTNT_ID as string,",
				"          PTNT_CD as string,",
				"          PHRMCY_NCPDP_NBR as string,",
				"          PHRMCY_NAT_PROV_ID_NBR as string,",
				"          PSCB_FIRST_NM as string,",
				"          PSCB_LAST_NM as string,",
				"          PHRMCY_NM as string,",
				"          PHRMCY_ADDR_CITY_NM as string,",
				"          PHRMCY_ADDR_ST_NM as string,",
				"          PHRMCY_ADDR_ZNE_NM as string,",
				"          PHRMCY_ADDR_ZIP_CD as string,",
				"          PSCB_EMAIL_ID as string,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT as string,",
				"          PHRMCY_SYS_IVR_DTA_STRT_QTR as string,",
				"          PHRMCY_SYS_IVR_DTA_STRT_YR as string,",
				"          PHRMCY_AGE as string,",
				"          DEAL_ID as string,",
				"          DEAL_TYPE_CD as string,",
				"          DEAL_NUMBER as string,",
				"          LANG_CD as string,",
				"          LANG_DESC as string,",
				"          RCD_CRT_TMS as string,",
				"          RCD_MOD_TMS as string,",
				"          START_DATE as string,",
				"          END_DATE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> DIMTGT",
				"phrmcysrc derive(PHRMCY_NCPDP_NBR = iif(PHRMCY_NCPDP_NBR == 'NULL', -1, toInteger(PHRMCY_NCPDP_NBR)),",
				"          PHRMCY_NAT_PROV_ID_NBR = iif(PHRMCY_NAT_PROV_ID_NBR == 'NULL', 'UNK',PHRMCY_NAT_PROV_ID_NBR),",
				"          PHRMCY_ADDR_ZIP_CD = iif(PHRMCY_ADDR_ZIP_CD == 'NULL','NULL',PHRMCY_ADDR_ZIP_CD),",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT = toDate(iif(PHRMCY_SYS_IVR_DTA_STRT_DT == 'NULL', '2999-12-31 00:00', PHRMCY_SYS_IVR_DTA_STRT_DT), 'yyyy-MM-dd')) ~> PhrmcyDerived",
				"PhrmcyDerived, statussrc join(phrmcysrc@DEAL_ID == statussrc@deal_id,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1, langsrc join(phrmcysrc@LANG_CD == langsrc@LANG_CD,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"select1 keyGenerate(output(PTNT_KEY as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"join2 select(mapColumn(",
				"          PHRMCY_NAT_PROV_ID_NBR,",
				"          PHRMCY_NCPDP_NBR,",
				"          PTNT_CD,",
				"          PSCB_FIRST_NM,",
				"          PSCB_LAST_NM,",
				"          LANG_CD = phrmcysrc@LANG_CD,",
				"          DEAL_ID,",
				"          PHRMCY_NM,",
				"          PHRMCY_ST_ADDR_LINE1_TXT,",
				"          PHRMCY_ADDR_ZIP_CD,",
				"          PHRMCY_ADDR_CITY_NM,",
				"          PHRMCY_ADDR_ST_CD,",
				"          PHRMCY_ADDR_ST_NAME,",
				"          PHRMCY_ADDR_ZNE_CD,",
				"          PHRMCY_ADDR_ZNE_NM,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT,",
				"          deal_id = statussrc@deal_id,",
				"          deal_nbr,",
				"          LANG_ID,",
				"          LANG_CD = langsrc@LANG_CD,",
				"          LANG_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"NullHandling derive(PTNT_ID = toInteger(split(PTNT_CD,'_')[1]),",
				"          PTNT_CD = split(PTNT_CD,'_')[size(split(PTNT_CD,'_'))],",
				"          PHRMCY_NM = replace(\r",
				"  replace(\r",
				"    replace(\r",
				"      replace(PHRMCY_NM, '-', ' '),\r",
				"      '&', ' '\r",
				"    ),\r",
				"    ',', ' '\r",
				"  ),\r",
				"  '\\'', ' '\r",
				"),",
				"          PHRMCY_ADDR_CITY_NM = iif(size(split(trim(PHRMCY_ADDR_CITY_NM), ' ')) > 1,        concat(upper(left(at(split(trim(PHRMCY_ADDR_CITY_NM), ' '), 1), 1)), upper(left(at(split(trim(PHRMCY_ADDR_CITY_NM), ' '), 2), 1))),        upper(substring(trim(PHRMCY_ADDR_CITY_NM), 1, 3))    ),",
				"          PHRMCY_ADDR_ZIP_CD = iif(PHRMCY_ADDR_ZIP_CD=='NULL',toString(null()),lpad(toString(PHRMCY_ADDR_ZIP_CD), 5, '0')),",
				"          PSCB_EMAIL_ID = concat(\r",
				"    left(trim(PSCB_FIRST_NM), toInteger(round(length(trim(PSCB_FIRST_NM)) * 1/2))),\r",
				"    left(trim(PSCB_LAST_NM), 1),\r",
				"    '@UN.com'\r",
				"),",
				"          PHRMCY_ADDR_ST_NAME = initCap(PHRMCY_ADDR_ST_NAME),",
				"          PHRMCY_ADDR_ZNE_NM = initCap(PHRMCY_ADDR_ZNE_NM),",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT = toString(PHRMCY_SYS_IVR_DTA_STRT_DT,'yyyy-MM-dd'),",
				"          PHRMCY_SYS_IVR_DTA_STRT_QTR = concat(iif(month(PHRMCY_SYS_IVR_DTA_STRT_DT) <= 3, 'Q1',iif(month(PHRMCY_SYS_IVR_DTA_STRT_DT) <= 6, 'Q2',               \r",
				"iif(month(PHRMCY_SYS_IVR_DTA_STRT_DT) <= 9, 'Q3', 'Q4'))),'-',toString(year(PHRMCY_SYS_IVR_DTA_STRT_DT))),",
				"          PHRMCY_SYS_IVR_DTA_STRT_YR = toString(year(PHRMCY_SYS_IVR_DTA_STRT_DT)),",
				"          PHRMCY_AGE = year(currentUTC()) - year(PHRMCY_SYS_IVR_DTA_STRT_DT),",
				"          DEAL_TYPE_CD = left(deal_nbr,2),",
				"          DEAL_NUMBER = substring(deal_nbr,3),",
				"          RCD_CRT_TMS = currentUTC(),",
				"          RCD_MOD_TMS = '',",
				"          START_DATE = currentUTC(),",
				"          END_DATE = '') ~> Transformation",
				"surrogateKey1 derive(each(match(type=='string'), $$ = iif(isNull($$),'UNK',$$))) ~> NullHandling",
				"Transformation filter(equals(PHRMCY_ADDR_ZNE_CD, 'US') || equals(PHRMCY_ADDR_ZNE_CD, 'PR')) ~> FiltUsPr",
				"FiltUsPr select(mapColumn(",
				"          PTNT_KEY,",
				"          PTNT_ID,",
				"          PTNT_CD,",
				"          PHRMCY_NCPDP_NBR,",
				"          PHRMCY_NAT_PROV_ID_NBR,",
				"          PSCB_FIRST_NM,",
				"          PSCB_LAST_NM,",
				"          PHRMCY_NM,",
				"          PHRMCY_ADDR_CITY_NM,",
				"          PHRMCY_ADDR_ST_NAME,",
				"          PHRMCY_ADDR_ZNE_NM,",
				"          PHRMCY_ADDR_ZIP_CD,",
				"          PSCB_EMAIL_ID,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT,",
				"          PHRMCY_SYS_IVR_DTA_STRT_QTR,",
				"          PHRMCY_SYS_IVR_DTA_STRT_YR,",
				"          PHRMCY_AGE,",
				"          deal_id,",
				"          DEAL_TYPE_CD,",
				"          DEAL_NUMBER,",
				"          LANG_CD,",
				"          LANG_DESC,",
				"          RCD_CRT_TMS,",
				"          RCD_MOD_TMS,",
				"          START_DATE,",
				"          END_DATE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelReqCol",
				"SelReqCol derive(PTNT_KEY = toInteger(PTNT_KEY),",
				"          PHRMCY_NAT_PROV_ID_NBR = toString(PHRMCY_NAT_PROV_ID_NBR),",
				"          START_DATE = toDate(START_DATE),",
				"          END_DATE = toDate(END_DATE),",
				"          RCD_MOD_TMS = toDate(RCD_MOD_TMS),",
				"          PHRMCY_ADDR_ZIP_CD = iif(PHRMCY_ADDR_ZIP_CD =='0NULL', 'UNK', PHRMCY_ADDR_ZIP_CD)) ~> AuditColumns",
				"AuditColumns, TargetDerived join(SelReqCol@PTNT_CD == DIMTGT@PTNT_CD,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinswithtarget",
				"DIMTGT derive(PTNT_KEY = toInteger(PTNT_KEY),",
				"          PTNT_ID = split(PTNT_CD,'_')[size(split(PTNT_CD,'_'))],",
				"          PHRMCY_NCPDP_NBR = toInteger(PHRMCY_NCPDP_NBR),",
				"          PHRMCY_AGE = toInteger(PHRMCY_AGE),",
				"          RCD_CRT_TMS = toDate(RCD_CRT_TMS, 'dd-MM-yyyy'),",
				"          RCD_MOD_TMS = toDate(RCD_MOD_TMS, 'dd-MM-yyyy'),",
				"          START_DATE = toDate(START_DATE, 'dd-MM-yyyy'),",
				"          END_DATE = toDate(END_DATE, 'dd-MM-yyyy')) ~> TargetDerived",
				"joinswithtarget split(isNull(DIMTGT@PTNT_CD),",
				"     (SelReqCol@PTNT_CD == DIMTGT@PTNT_CD) && (AuditColumns@PHRMCY_ADDR_ZIP_CD != DIMTGT@PHRMCY_ADDR_ZIP_CD),",
				"     disjoint: false) ~> INSERT@(INSERT, UPDATE, EXISTING)",
				"INSERT@INSERT derive({Is Current} = 1,",
				"          RCD_CRT_TMS = currentTimestamp(),",
				"          START_DATE = currentDate(),",
				"          END_DATE = toDate('')) ~> AuditColumn",
				"AuditColumn select(mapColumn(",
				"          PTNT_KEY = INSERT@INSERT@PTNT_KEY,",
				"          PTNT_ID = INSERT@INSERT@PTNT_ID,",
				"          PTNT_CD = INSERT@INSERT@PTNT_CD,",
				"          PHRMCY_NCPDP_NBR = INSERT@INSERT@PHRMCY_NCPDP_NBR,",
				"          PHRMCY_NAT_PROV_ID_NBR = INSERT@INSERT@PHRMCY_NAT_PROV_ID_NBR,",
				"          PSCB_FIRST_NM = INSERT@INSERT@PSCB_FIRST_NM,",
				"          PSCB_LAST_NM = INSERT@INSERT@PSCB_LAST_NM,",
				"          PHRMCY_NM = INSERT@INSERT@PHRMCY_NM,",
				"          PHRMCY_ADDR_CITY_NM = INSERT@INSERT@PHRMCY_ADDR_CITY_NM,",
				"          PHRMCY_ADDR_ST_NAME,",
				"          PHRMCY_ADDR_ZNE_NM = INSERT@INSERT@PHRMCY_ADDR_ZNE_NM,",
				"          PHRMCY_ADDR_ZIP_CD = INSERT@INSERT@PHRMCY_ADDR_ZIP_CD,",
				"          PSCB_EMAIL_ID = INSERT@INSERT@PSCB_EMAIL_ID,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT = INSERT@INSERT@PHRMCY_SYS_IVR_DTA_STRT_DT,",
				"          PHRMCY_SYS_IVR_DTA_STRT_QTR = INSERT@INSERT@PHRMCY_SYS_IVR_DTA_STRT_QTR,",
				"          PHRMCY_SYS_IVR_DTA_STRT_YR = INSERT@INSERT@PHRMCY_SYS_IVR_DTA_STRT_YR,",
				"          PHRMCY_AGE = INSERT@INSERT@PHRMCY_AGE,",
				"          deal_id = INSERT@INSERT@deal_id,",
				"          DEAL_TYPE_CD = INSERT@INSERT@DEAL_TYPE_CD,",
				"          DEAL_NUMBER = INSERT@INSERT@DEAL_NUMBER,",
				"          LANG_CD = INSERT@INSERT@LANG_CD,",
				"          LANG_DESC = INSERT@INSERT@LANG_DESC,",
				"          RCD_CRT_TMS,",
				"          RCD_MOD_TMS = INSERT@INSERT@RCD_MOD_TMS,",
				"          START_DATE,",
				"          END_DATE,",
				"          Is_current = {Is Current}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectingSrcColumns",
				"INSERT@UPDATE derive({Is Current} = 1,",
				"          RCD_MOD_TMS = currentDate(),",
				"          RCD_CRT_TMS = currentTimestamp()) ~> UpdateAuditColumns",
				"UpdateAuditColumns select(mapColumn(",
				"          PTNT_KEY = INSERT@UPDATE@PTNT_KEY,",
				"          PTNT_ID = INSERT@UPDATE@PTNT_ID,",
				"          PTNT_CD = INSERT@UPDATE@PTNT_CD,",
				"          PHRMCY_NCPDP_NBR = INSERT@UPDATE@PHRMCY_NCPDP_NBR,",
				"          PHRMCY_NAT_PROV_ID_NBR = INSERT@UPDATE@PHRMCY_NAT_PROV_ID_NBR,",
				"          PSCB_FIRST_NM = INSERT@UPDATE@PSCB_FIRST_NM,",
				"          PSCB_LAST_NM = INSERT@UPDATE@PSCB_LAST_NM,",
				"          PHRMCY_NM = INSERT@UPDATE@PHRMCY_NM,",
				"          PHRMCY_ADDR_CITY_NM = INSERT@UPDATE@PHRMCY_ADDR_CITY_NM,",
				"          PHRMCY_ADDR_ST_NAME,",
				"          PHRMCY_ADDR_ZNE_NM = INSERT@UPDATE@PHRMCY_ADDR_ZNE_NM,",
				"          PHRMCY_ADDR_ZIP_CD = INSERT@UPDATE@PHRMCY_ADDR_ZIP_CD,",
				"          PSCB_EMAIL_ID = INSERT@UPDATE@PSCB_EMAIL_ID,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT = INSERT@UPDATE@PHRMCY_SYS_IVR_DTA_STRT_DT,",
				"          PHRMCY_SYS_IVR_DTA_STRT_QTR = INSERT@UPDATE@PHRMCY_SYS_IVR_DTA_STRT_QTR,",
				"          PHRMCY_SYS_IVR_DTA_STRT_YR = INSERT@UPDATE@PHRMCY_SYS_IVR_DTA_STRT_YR,",
				"          PHRMCY_AGE = INSERT@UPDATE@PHRMCY_AGE,",
				"          deal_id = INSERT@UPDATE@deal_id,",
				"          DEAL_TYPE_CD = INSERT@UPDATE@DEAL_TYPE_CD,",
				"          DEAL_NUMBER = INSERT@UPDATE@DEAL_NUMBER,",
				"          LANG_CD = INSERT@UPDATE@LANG_CD,",
				"          LANG_DESC = INSERT@UPDATE@LANG_DESC,",
				"          RCD_CRT_TMS,",
				"          RCD_MOD_TMS,",
				"          START_DATE = INSERT@UPDATE@START_DATE,",
				"          END_DATE = INSERT@UPDATE@END_DATE,",
				"          Is_current = {Is Current}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> UpdateSelection",
				"INSERT@EXISTING derive(RCD_MOD_TMS = toDate(''),",
				"          {Is Current} = 1,",
				"          RCD_CRT_TMS = currentTimestamp()) ~> ExistingAuditColumn",
				"ExistingAuditColumn select(mapColumn(",
				"          PTNT_KEY = INSERT@EXISTING@PTNT_KEY,",
				"          PTNT_ID = INSERT@EXISTING@PTNT_ID,",
				"          PTNT_CD = INSERT@EXISTING@PTNT_CD,",
				"          PHRMCY_NCPDP_NBR = INSERT@EXISTING@PHRMCY_NCPDP_NBR,",
				"          PHRMCY_NAT_PROV_ID_NBR = INSERT@EXISTING@PHRMCY_NAT_PROV_ID_NBR,",
				"          PSCB_FIRST_NM = INSERT@EXISTING@PSCB_FIRST_NM,",
				"          PSCB_LAST_NM = INSERT@EXISTING@PSCB_LAST_NM,",
				"          PHRMCY_NM = INSERT@EXISTING@PHRMCY_NM,",
				"          PHRMCY_ADDR_CITY_NM = INSERT@EXISTING@PHRMCY_ADDR_CITY_NM,",
				"          PHRMCY_ADDR_ST_NAME,",
				"          PHRMCY_ADDR_ZNE_NM = INSERT@EXISTING@PHRMCY_ADDR_ZNE_NM,",
				"          PHRMCY_ADDR_ZIP_CD = INSERT@EXISTING@PHRMCY_ADDR_ZIP_CD,",
				"          PSCB_EMAIL_ID = INSERT@EXISTING@PSCB_EMAIL_ID,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT = INSERT@EXISTING@PHRMCY_SYS_IVR_DTA_STRT_DT,",
				"          PHRMCY_SYS_IVR_DTA_STRT_QTR = INSERT@EXISTING@PHRMCY_SYS_IVR_DTA_STRT_QTR,",
				"          PHRMCY_SYS_IVR_DTA_STRT_YR = INSERT@EXISTING@PHRMCY_SYS_IVR_DTA_STRT_YR,",
				"          PHRMCY_AGE = INSERT@EXISTING@PHRMCY_AGE,",
				"          deal_id = INSERT@EXISTING@deal_id,",
				"          DEAL_TYPE_CD = INSERT@EXISTING@DEAL_TYPE_CD,",
				"          DEAL_NUMBER = INSERT@EXISTING@DEAL_NUMBER,",
				"          LANG_CD = INSERT@EXISTING@LANG_CD,",
				"          LANG_DESC = INSERT@EXISTING@LANG_DESC,",
				"          RCD_CRT_TMS,",
				"          RCD_MOD_TMS,",
				"          START_DATE = INSERT@EXISTING@START_DATE,",
				"          END_DATE = INSERT@EXISTING@END_DATE,",
				"          Is_current = {Is Current}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> ExtistingSelection",
				"SelectingSrcColumns, UpdateSelection, ExtistingSelection, HistoryRecord union(byName: true)~> CombiningRows",
				"CombiningRows select(mapColumn(",
				"          PTNT_KEY,",
				"          PTNT_ID,",
				"          PTNT_CD,",
				"          PHRMCY_NCPDP_NBR,",
				"          PHRMCY_NAT_PROV_ID_NBR,",
				"          PSCB_FIRST_NM,",
				"          PSCB_LAST_NM,",
				"          PHRMCY_NM,",
				"          PHRMCY_ADDR_CITY_NM,",
				"          PHRMCY_ADDR_ST_NAME,",
				"          PHRMCY_ADDR_ZNE_NM,",
				"          PHRMCY_ADDR_ZIP_CD,",
				"          PSCB_EMAIL_ID,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT,",
				"          PHRMCY_SYS_IVR_DTA_STRT_QTR,",
				"          PHRMCY_SYS_IVR_DTA_STRT_YR,",
				"          PHRMCY_AGE,",
				"          deal_id,",
				"          DEAL_TYPE_CD,",
				"          DEAL_NUMBER,",
				"          LANG_CD,",
				"          LANG_DESC,",
				"          RCD_CRT_TMS,",
				"          RCD_MOD_TMS,",
				"          START_DATE,",
				"          END_DATE,",
				"          {Is Current} = Is_current,",
				"          {Is Current } = Is_current",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FinalSelection",
				"INSERT@UPDATE derive({Is current } = 0,",
				"          END_DATE = currentDate(),",
				"          RCD_MOD_TMS = currentDate(),",
				"          PHRMCY_NCPDP_NBR = toInteger(INSERT@UPDATE@PHRMCY_NCPDP_NBR),",
				"          RCD_CRT_TMS = currentTimestamp()) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          PTNT_KEY = INSERT@UPDATE@PTNT_KEY,",
				"          PTNT_ID = INSERT@UPDATE@PTNT_ID,",
				"          PTNT_CD = INSERT@UPDATE@PTNT_CD,",
				"          PHRMCY_NCPDP_NBR,",
				"          PHRMCY_NAT_PROV_ID_NBR = INSERT@UPDATE@PHRMCY_NAT_PROV_ID_NBR,",
				"          PSCB_FIRST_NM = INSERT@UPDATE@PSCB_FIRST_NM,",
				"          PSCB_LAST_NM = INSERT@UPDATE@PSCB_LAST_NM,",
				"          PHRMCY_NM = INSERT@UPDATE@PHRMCY_NM,",
				"          PHRMCY_ADDR_CITY_NM = INSERT@UPDATE@PHRMCY_ADDR_CITY_NM,",
				"          PHRMCY_ADDR_ST_NAME,",
				"          PHRMCY_ADDR_ZNE_NM = INSERT@UPDATE@PHRMCY_ADDR_ZNE_NM,",
				"          PHRMCY_ADDR_ZIP_CD = INSERT@UPDATE@PHRMCY_ADDR_ZIP_CD,",
				"          PSCB_EMAIL_ID = INSERT@UPDATE@PSCB_EMAIL_ID,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT = INSERT@UPDATE@PHRMCY_SYS_IVR_DTA_STRT_DT,",
				"          PHRMCY_SYS_IVR_DTA_STRT_QTR = INSERT@UPDATE@PHRMCY_SYS_IVR_DTA_STRT_QTR,",
				"          PHRMCY_SYS_IVR_DTA_STRT_YR = INSERT@UPDATE@PHRMCY_SYS_IVR_DTA_STRT_YR,",
				"          PHRMCY_AGE = INSERT@UPDATE@PHRMCY_AGE,",
				"          deal_id = INSERT@UPDATE@deal_id,",
				"          DEAL_TYPE_CD = INSERT@UPDATE@DEAL_TYPE_CD,",
				"          DEAL_NUMBER = INSERT@UPDATE@DEAL_NUMBER,",
				"          LANG_CD = INSERT@UPDATE@LANG_CD,",
				"          LANG_DESC = INSERT@UPDATE@LANG_DESC,",
				"          RCD_CRT_TMS,",
				"          RCD_MOD_TMS,",
				"          START_DATE = INSERT@UPDATE@START_DATE,",
				"          END_DATE,",
				"          Is_current = {Is current }",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> HistoryRecord",
				"FinalSelection sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Prop_0 as string,",
				"          match_id as string,",
				"          date as string,",
				"          match_type as string,",
				"          event_name as string,",
				"          innings as string,",
				"          batting_team as string,",
				"          bowling_team as string,",
				"          over as string,",
				"          ball as string,",
				"          ball_no as string,",
				"          batter as string,",
				"          bat_pos as string,",
				"          runs_batter as string,",
				"          balls_faced as string,",
				"          bowler as string,",
				"          valid_ball as string,",
				"          runs_extras as string,",
				"          runs_total as string,",
				"          runs_bowler as string,",
				"          runs_not_boundary as string,",
				"          extra_type as string,",
				"          non_striker as string,",
				"          non_striker_pos as string,",
				"          wicket_kind as string,",
				"          player_out as string,",
				"          fielders as string,",
				"          runs_target as string,",
				"          review_batter as string,",
				"          team_reviewed as string,",
				"          review_decision as string,",
				"          umpire as string,",
				"          umpires_call as string,",
				"          player_of_match as string,",
				"          match_won_by as string,",
				"          win_outcome as string,",
				"          toss_winner as string,",
				"          toss_decision as string,",
				"          venue as string,",
				"          city as string,",
				"          day as string,",
				"          month as string,",
				"          year as string,",
				"          season as string,",
				"          gender as string,",
				"          team_type as string,",
				"          superover_winner as string,",
				"          result_type as string,",
				"          method as string,",
				"          balls_per_over as string,",
				"          overs as string,",
				"          event_match_no as string,",
				"          stage as string,",
				"          match_number as string,",
				"          team_runs as string,",
				"          team_balls as string,",
				"          team_wicket as string,",
				"          new_batter as string,",
				"          batter_runs as string,",
				"          batter_balls as string,",
				"          bowler_wicket as string,",
				"          batting_partners as string,",
				"          next_batter as string,",
				"          striker_out as string",
				"     ),",
				"     partitionFileNames:['DIM_PTNT_ADF_SCD2.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}