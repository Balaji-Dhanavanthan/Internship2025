{
	"name": "df_scdtype_01",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Blob2",
						"type": "DatasetReference"
					},
					"name": "Employeetgt"
				},
				{
					"dataset": {
						"referenceName": "DS_Blob3",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          employee_id as string,",
				"          first_name as string,",
				"          last_name as string,",
				"          email as string,",
				"          phone_number as string,",
				"          hire_date as string,",
				"          job_id as string,",
				"          salary as string,",
				"          manager_id as string,",
				"          department_id as string,",
				"          created_date as string,",
				"          created_by as string,",
				"          modified_date as string,",
				"          modified_by as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Employeetgt",
				"source(output(",
				"          employee_id as short,",
				"          first_name as string,",
				"          last_name as string,",
				"          email as string,",
				"          phone_number as string,",
				"          hire_date as string,",
				"          job_id as string,",
				"          salary as double,",
				"          commission as string,",
				"          manager_id as short,",
				"          department_id as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1, Employeetgt join(source1@employee_id == toInteger(Employeetgt@employee_id),",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 split((source1@employee_id==toShort(Employeetgt@employee_id)) && (source1@salary!=toDouble(Employeetgt@salary)),",
				"     source1@employee_id!=toInteger(Employeetgt@employee_id),",
				"     (source1@employee_id==toInteger(Employeetgt@employee_id)) && (source1@first_name==Employeetgt@first_name) && (source1@last_name==Employeetgt@last_name) &&(source1@email==Employeetgt@email)&&\r",
				"(source1@phone_number==Employeetgt@phone_number),",
				"     disjoint: false) ~> split1@(insert, update, remaining)",
				"split1@insert derive(salary = split1@insert@salary) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}