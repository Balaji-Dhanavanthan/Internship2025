{
	"name": "SCD_1",
	"properties": {
		"folder": {
			"name": "TDSG_ADF_DataFlow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "target"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "sourceselect1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "targetderived"
				},
				{
					"name": "insert"
				},
				{
					"name": "select2"
				},
				{
					"name": "update1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmployeeID as short,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as string,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as integer,",
				"          HireDate as string,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as string,",
				"          EndDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          EmployeeID as short,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as string,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as integer,",
				"          HireDate as string,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as string,",
				"          EndDate as string,",
				"          created_by as string,",
				"          created_at as date,",
				"          modified_by as string,",
				"          modified_at as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> target",
				"derivedColumn2 select(mapColumn(",
				"          src_EmployeeID = EmployeeID,",
				"          src_Name = Name,",
				"          src_Gender = Gender,",
				"          src_DateOfBirth = DateOfBirth,",
				"          src_Department = Department,",
				"          src_JobTitle = JobTitle,",
				"          src_Salary = Salary,",
				"          src_HireDate = HireDate,",
				"          src_Address = Address,",
				"          src_Email = Email,",
				"          src_PhoneNumber = PhoneNumber,",
				"          src_MaritalStatus = MaritalStatus,",
				"          src_EffectiveDate = EffectiveDate,",
				"          src_EndDate = EndDate",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sourceselect1",
				"sourceselect1, targetderived join(src_EmployeeID == EmployeeID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"insert@INSERT select(mapColumn(",
				"          src_EmployeeID,",
				"          src_Name,",
				"          src_Gender,",
				"          src_DateOfBirth,",
				"          src_Department,",
				"          src_JobTitle,",
				"          src_Salary,",
				"          src_HireDate,",
				"          src_Address,",
				"          src_Email,",
				"          src_PhoneNumber,",
				"          src_MaritalStatus,",
				"          src_EffectiveDate,",
				"          src_EndDate,",
				"          EmployeeID,",
				"          Name,",
				"          Gender,",
				"          DateOfBirth,",
				"          Department,",
				"          JobTitle,",
				"          Salary,",
				"          HireDate,",
				"          Address,",
				"          Email,",
				"          PhoneNumber,",
				"          MaritalStatus,",
				"          EffectiveDate,",
				"          EndDate,",
				"          created_by,",
				"          created_at,",
				"          modified_by,",
				"          modified_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 derive(modified_by = 'I2025_MSyed',",
				"          modified_at = currentDate()) ~> derivedColumn1",
				"source1 derive(EmployeeID = toInteger(EmployeeID),",
				"          HireDate = toDate(HireDate,'dd-MM-yyyy'),",
				"          DateOfBirth = toDate(DateOfBirth,'dd-MM-yyyy'),",
				"          EffectiveDate = toDate(EffectiveDate,'dd-MM-yyyy'),",
				"          EndDate = toDate(EndDate,'dd-MM-yyyy')) ~> derivedColumn2",
				"target derive(EmployeeID = toInteger(EmployeeID),",
				"          DateOfBirth = toDate(DateOfBirth,'yyyy-MM-dd'),",
				"          HireDate = toDate(HireDate,'dd-MM-yyyy'),",
				"          EffectiveDate = toDate(EffectiveDate,'dd-MM-yyyy'),",
				"          EndDate = toDate(EndDate,'dd-MM-yyyy')) ~> targetderived",
				"join1 split(isNull(EmployeeID),",
				"     disjoint: false) ~> insert@(INSERT, UPDATE)",
				"targetderived select(mapColumn(",
				"          EmployeeID,",
				"          Name,",
				"          Gender,",
				"          DateOfBirth,",
				"          Department,",
				"          JobTitle,",
				"          Salary,",
				"          HireDate,",
				"          Address,",
				"          Email,",
				"          PhoneNumber,",
				"          MaritalStatus,",
				"          EffectiveDate,",
				"          EndDate,",
				"          created_by,",
				"          created_at,",
				"          modified_by,",
				"          modified_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"insert@UPDATE split(src_EmployeeID==EmployeeID||src_Department!={Department}||src_JobTitle!={JobTitle}||src_Salary!={Salary}||src_PhoneNumber!={PhoneNumber}||src_MaritalStatus!={MaritalStatus},",
				"     disjoint: false) ~> update1@(Update, existing)"
			]
		}
	}
}