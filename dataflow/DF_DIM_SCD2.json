{
	"name": "DF_DIM_SCD2",
	"properties": {
		"folder": {
			"name": "TDSG_ADF_DataFlow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "sourceData"
				},
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "target"
				},
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "sourcederived"
				},
				{
					"name": "targetderived"
				},
				{
					"name": "join1"
				},
				{
					"name": "insert"
				},
				{
					"name": "insertDerived"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "join2"
				},
				{
					"name": "split1"
				},
				{
					"name": "derivedColumn3"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "union1"
				},
				{
					"name": "derivedColumn4"
				},
				{
					"name": "select5"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PTNT_KEY as string,",
				"          PTNT_ID as string,",
				"          PTNT_CD as string,",
				"          PHRMCY_NCPDP_NBR as string,",
				"          PHRMCY_NAT_PROV_ID_NBR as string,",
				"          PSCB_FIRST_NM as string,",
				"          PSCB_LAST_NM as string,",
				"          PHRMCY_NM as string,",
				"          PHRMCY_ADDR_CITY_NM as string,",
				"          PHRMCY_ADDR_ST_NAME as string,",
				"          PHRMCY_ADDR_ZNE_NM as string,",
				"          PHRMCY_ADDR_ZIP_CD as string,",
				"          PSCB_EMAIL_ID as string,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT as string,",
				"          PHRMCY_SYS_IVR_DTA_STRT_QTR as string,",
				"          PHRMCY_SYS_IVR_DTA_STRT_YR as string,",
				"          PHRMCY_AGE as short,",
				"          deal_id as string,",
				"          DEAL_TYPE_CD as string,",
				"          DEAL_NUMBER as string,",
				"          LANG_CD as string,",
				"          LANG_DESC as string,",
				"          RCD_CRT_TMS as string,",
				"          RCD_MOD_TMS as string,",
				"          START_DATE as string,",
				"          END_DATE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceData",
				"source(output(",
				"          PTNT_KEY as string,",
				"          PTNT_ID as string,",
				"          PTNT_CD as string,",
				"          PHRMCY_NCPDP_NBR as string,",
				"          PHRMCY_NAT_PROV_ID_NBR as string,",
				"          PSCB_FIRST_NM as string,",
				"          PSCB_LAST_NM as string,",
				"          PHRMCY_NM as string,",
				"          PHRMCY_ADDR_CITY_NM as string,",
				"          PHRMCY_ADDR_ST_NM as string,",
				"          PHRMCY_ADDR_ZNE_NM as string,",
				"          PHRMCY_ADDR_ZIP_CD as string,",
				"          PSCB_EMAIL_ID as string,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT as string,",
				"          PHRMCY_SYS_IVR_DTA_STRT_QTR as string,",
				"          PHRMCY_SYS_IVR_DTA_STRT_YR as string,",
				"          PHRMCY_AGE as string,",
				"          DEAL_ID as string,",
				"          DEAL_TYPE_CD as string,",
				"          DEAL_NUMBER as string,",
				"          LANG_CD as string,",
				"          LANG_DESC as string,",
				"          RCD_CRT_TMS as string,",
				"          RCD_MOD_TMS as string,",
				"          START_DATE as string,",
				"          END_DATE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> target",
				"source(output(",
				"          PTNT_KEY as string,",
				"          PTNT_ID as string,",
				"          PTNT_CD as string,",
				"          PHRMCY_NCPDP_NBR as string,",
				"          PHRMCY_NAT_PROV_ID_NBR as string,",
				"          PSCB_FIRST_NM as string,",
				"          PSCB_LAST_NM as string,",
				"          PHRMCY_NM as string,",
				"          PHRMCY_ADDR_CITY_NM as string,",
				"          PHRMCY_ADDR_ST_NAME as string,",
				"          PHRMCY_ADDR_ZNE_NM as string,",
				"          PHRMCY_ADDR_ZIP_CD as string,",
				"          PSCB_EMAIL_ID as string,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT as string,",
				"          PHRMCY_SYS_IVR_DTA_STRT_QTR as string,",
				"          PHRMCY_SYS_IVR_DTA_STRT_YR as string,",
				"          PHRMCY_AGE as string,",
				"          deal_id as string,",
				"          DEAL_TYPE_CD as string,",
				"          DEAL_NUMBER as string,",
				"          LANG_CD as string,",
				"          LANG_DESC as string,",
				"          RCD_CRT_TMS as string,",
				"          RCD_MOD_TMS as string,",
				"          START_DATE as string,",
				"          END_DATE as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"sourceData derive(PTNT_KEY = toInteger(PTNT_KEY),",
				"          PTNT_ID = toInteger(PTNT_ID),",
				"          PHRMCY_NCPDP_NBR = toInteger(PHRMCY_NCPDP_NBR),",
				"          PHRMCY_AGE = toInteger(PHRMCY_AGE),",
				"          RCD_CRT_TMS = toTimestamp(RCD_CRT_TMS,'yyyy-MM-dd HH:mm:ss'),",
				"          RCD_MOD_TMS = toTimestamp(RCD_MOD_TMS,'yyyy-MM-dd HH:mm:ss'),",
				"          START_DATE = toDate(currentTimestamp()),",
				"          END_DATE = toDate('')) ~> sourcederived",
				"target derive(PTNT_KEY = toInteger(PTNT_KEY),",
				"          PTNT_ID = toInteger(PTNT_ID),",
				"          PHRMCY_NCPDP_NBR = toInteger(PHRMCY_NCPDP_NBR),",
				"          PHRMCY_AGE = toInteger(PHRMCY_AGE),",
				"          IsCurrent = 1,",
				"          RCD_CRT_TMS = toTimestamp(RCD_CRT_TMS,'yyyy-MM-dd HH:mm:ss'),",
				"          RCD_MOD_TMS = toTimestamp(RCD_MOD_TMS,'yyyy-MM-dd HH:mm:ss'),",
				"          START_DATE = toDate(currentTimestamp()),",
				"          END_DATE = toDate('')) ~> targetderived",
				"sourcederived, targetderived join(sourcederived@PTNT_KEY == targetderived@PTNT_KEY,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 split(isNull(targetderived@PTNT_KEY),",
				"     (sourceData@PTNT_CD == target@PTNT_CD) && (sourceData@PHRMCY_ADDR_ZIP_CD != target@PHRMCY_ADDR_ZIP_CD),",
				"     disjoint: false) ~> insert@(Insert, UPDATE, existing)",
				"insert@Insert derive(IsCurrent = 1,",
				"          created_by = 'I2025_MSyed',",
				"          created_at = currentDate(),",
				"          modified_at = toDate('')) ~> insertDerived",
				"insert@UPDATE derive(IsCurrent = 1,",
				"          modified_at = toDate('')) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          each(match(/* All input columns */true()),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source1 derive(PTNT_KEY = toInteger(PTNT_KEY),",
				"          PTNT_ID = toInteger(PTNT_KEY),",
				"          PHRMCY_NCPDP_NBR = toInteger(PTNT_KEY),",
				"          PHRMCY_AGE = toInteger(PTNT_KEY),",
				"          RCD_CRT_TMS = toTimestamp(RCD_CRT_TMS,'yyyy-MM-dd HH:mm:ss'),",
				"          RCD_MOD_TMS = toTimestamp(RCD_MOD_TMS,'yyyy-MM-dd HH:mm:ss'),",
				"          START_DATE = toDate(currentTimestamp()),",
				"          END_DATE = toDate('')) ~> derivedColumn2",
				"derivedColumn2, sourcederived join(derivedColumn2@PTNT_KEY == sourcederived@PTNT_KEY,",
				"     joinType:'right',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"join2 split(derivedColumn2@PTNT_KEY == sourcederived@PTNT_KEY && (source1@PHRMCY_ADDR_ZIP_CD != sourceData@PHRMCY_ADDR_ZIP_CD),",
				"     disjoint: false) ~> split1@(update, Existing)",
				"split1@update derive(IsCurrent = 0,",
				"          modified_by = 'I2025_MSyed',",
				"          modified_at = currentDate(),",
				"          EndDate = currentDate()) ~> derivedColumn3",
				"derivedColumn3 select(mapColumn(",
				"          each(match(/* All input columns */true()),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"derivedColumn4 select(mapColumn(",
				"          each(match(/* All input columns */true()),",
				"               /* Input name */$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"insertDerived select(mapColumn(",
				"          PTNT_KEY = insert@Insert@PTNT_KEY,",
				"          PTNT_ID = insert@Insert@PTNT_ID,",
				"          PTNT_CD = insert@Insert@PTNT_CD,",
				"          PHRMCY_NCPDP_NBR = insert@Insert@PHRMCY_NCPDP_NBR,",
				"          PHRMCY_NAT_PROV_ID_NBR = insert@Insert@PHRMCY_NAT_PROV_ID_NBR,",
				"          PSCB_FIRST_NM = insert@Insert@PSCB_FIRST_NM,",
				"          PSCB_LAST_NM = insert@Insert@PSCB_LAST_NM,",
				"          PHRMCY_NM = insert@Insert@PHRMCY_NM,",
				"          PHRMCY_ADDR_CITY_NM = insert@Insert@PHRMCY_ADDR_CITY_NM,",
				"          PHRMCY_ADDR_ST_NAME,",
				"          PHRMCY_ADDR_ZNE_NM = insert@Insert@PHRMCY_ADDR_ZNE_NM,",
				"          PHRMCY_ADDR_ZIP_CD = insert@Insert@PHRMCY_ADDR_ZIP_CD,",
				"          PSCB_EMAIL_ID = insert@Insert@PSCB_EMAIL_ID,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT = insert@Insert@PHRMCY_SYS_IVR_DTA_STRT_DT,",
				"          PHRMCY_SYS_IVR_DTA_STRT_QTR = insert@Insert@PHRMCY_SYS_IVR_DTA_STRT_QTR,",
				"          PHRMCY_SYS_IVR_DTA_STRT_YR = insert@Insert@PHRMCY_SYS_IVR_DTA_STRT_YR,",
				"          PHRMCY_AGE = insert@Insert@PHRMCY_AGE,",
				"          deal_id = insert@Insert@deal_id,",
				"          DEAL_TYPE_CD = insert@Insert@DEAL_TYPE_CD,",
				"          DEAL_NUMBER = insert@Insert@DEAL_NUMBER,",
				"          LANG_CD = insert@Insert@LANG_CD,",
				"          LANG_DESC = insert@Insert@LANG_DESC,",
				"          RCD_CRT_TMS = insert@Insert@RCD_CRT_TMS,",
				"          RCD_MOD_TMS = insert@Insert@RCD_MOD_TMS,",
				"          START_DATE = insert@Insert@START_DATE,",
				"          END_DATE = insert@Insert@END_DATE,",
				"          IsCurrent,",
				"          created_by,",
				"          created_at,",
				"          modified_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select4, select1, select3, select2 union(byName: true)~> union1",
				"insert@existing derive(modified_at = toDate('')) ~> derivedColumn4",
				"union1 select(mapColumn(",
				"          PTNT_KEY,",
				"          PTNT_ID,",
				"          PTNT_CD,",
				"          PHRMCY_NCPDP_NBR,",
				"          PHRMCY_NAT_PROV_ID_NBR,",
				"          PSCB_FIRST_NM,",
				"          PSCB_LAST_NM,",
				"          PHRMCY_NM,",
				"          PHRMCY_ADDR_CITY_NM,",
				"          PHRMCY_ADDR_ST_NAME,",
				"          PHRMCY_ADDR_ZNE_NM,",
				"          PHRMCY_ADDR_ZIP_CD,",
				"          PSCB_EMAIL_ID,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT,",
				"          PHRMCY_SYS_IVR_DTA_STRT_QTR,",
				"          PHRMCY_SYS_IVR_DTA_STRT_YR,",
				"          PHRMCY_AGE,",
				"          deal_id = union1@deal_id,",
				"          DEAL_TYPE_CD,",
				"          DEAL_NUMBER,",
				"          LANG_CD,",
				"          LANG_DESC,",
				"          RCD_CRT_TMS,",
				"          RCD_MOD_TMS,",
				"          START_DATE,",
				"          END_DATE,",
				"          IsCurrent,",
				"          created_by,",
				"          created_at,",
				"          modified_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"select5 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Prop_0 as string,",
				"          match_id as string,",
				"          date as string,",
				"          match_type as string,",
				"          event_name as string,",
				"          innings as string,",
				"          batting_team as string,",
				"          bowling_team as string,",
				"          over as string,",
				"          ball as string,",
				"          ball_no as string,",
				"          batter as string,",
				"          bat_pos as string,",
				"          runs_batter as string,",
				"          balls_faced as string,",
				"          bowler as string,",
				"          valid_ball as string,",
				"          runs_extras as string,",
				"          runs_total as string,",
				"          runs_bowler as string,",
				"          runs_not_boundary as string,",
				"          extra_type as string,",
				"          non_striker as string,",
				"          non_striker_pos as string,",
				"          wicket_kind as string,",
				"          player_out as string,",
				"          fielders as string,",
				"          runs_target as string,",
				"          review_batter as string,",
				"          team_reviewed as string,",
				"          review_decision as string,",
				"          umpire as string,",
				"          umpires_call as string,",
				"          player_of_match as string,",
				"          match_won_by as string,",
				"          win_outcome as string,",
				"          toss_winner as string,",
				"          toss_decision as string,",
				"          venue as string,",
				"          city as string,",
				"          day as string,",
				"          month as string,",
				"          year as string,",
				"          season as string,",
				"          gender as string,",
				"          team_type as string,",
				"          superover_winner as string,",
				"          result_type as string,",
				"          method as string,",
				"          balls_per_over as string,",
				"          overs as string,",
				"          event_match_no as string,",
				"          stage as string,",
				"          match_number as string,",
				"          team_runs as string,",
				"          team_balls as string,",
				"          team_wicket as string,",
				"          new_batter as string,",
				"          batter_runs as string,",
				"          batter_balls as string,",
				"          bowler_wicket as string,",
				"          batting_partners as string,",
				"          next_batter as string,",
				"          striker_out as string",
				"     ),",
				"     partitionFileNames:['DIM_STTM_SCD2.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}