{
	"name": "DF3",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "XL_DS",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "filter2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "derivedColumn2"
				},
				{
					"name": "derivedColumn3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Survey ID} as integer,",
				"          {Feedback Program} as string,",
				"          {First name} as string,",
				"          {Last name} as string,",
				"          {Contact Name} as string,",
				"          Email as string,",
				"          {PHONE NUMBER} as long,",
				"          {Contact Country} as string,",
				"          {Job Title} as string,",
				"          {Contact Department} as string,",
				"          Language as string,",
				"          Salutation as string,",
				"          Ship_to as string,",
				"          {Ship to} as string,",
				"          Sold_to as string,",
				"          {Sold to} as string,",
				"          {Lead Contact OD} as string,",
				"          {Lead Contact GBU/RBU} as string,",
				"          {Lead Contact SBU} as string,",
				"          {Main Industry} as string,",
				"          Region as string,",
				"          {Sales Channel} as string,",
				"          {Customer Network} as boolean,",
				"          {Lead Contact Segmentation1} as string,",
				"          {Lead Contact Segmentation2} as string,",
				"          {Invitation Status} as string,",
				"          Creationdate as string,",
				"          {Invitation date} as string,",
				"          {Local Invitation Date} as string,",
				"          {Survey status} as string,",
				"          {Expires on date} as string,",
				"          {Local Expiration Date} as string,",
				"          {Reason for Score} as string,",
				"          {Ease of doing business} as short,",
				"          {Issue Resolution} as short,",
				"          {Product Quality} as short,",
				"          {Delivery Reliability} as short,",
				"          {Understanding your business needs} as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 select(mapColumn(",
				"          {Survey ID},",
				"          {Contact Name},",
				"          Email,",
				"          {PHONE NUMBER},",
				"          {Job Title},",
				"          {Ship to},",
				"          {Sold to},",
				"          {Lead Contact SBU},",
				"          {Main Industry},",
				"          {Lead Contact Segmentation1},",
				"          {Invitation Status},",
				"          Creationdate,",
				"          {Invitation date},",
				"          {Local Invitation Date},",
				"          {Survey status},",
				"          {Expires on date},",
				"          {Local Expiration Date},",
				"          {Reason for Score},",
				"          {Ease of doing business},",
				"          {Issue Resolution},",
				"          {Product Quality},",
				"          {Delivery Reliability},",
				"          {Understanding your business needs}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"derivedColumn3 filter(equals({Invitation Status}, 'Completed') && lesser({Product Quality}, 6)) ~> filter2",
				"filter2 derive(each(match(type=='string'), $$ = iifNull($$, \"UNK\")),",
				"          each(match(type=='integer'), $$ = iifNull($#,0))) ~> derivedColumn1",
				"derivedColumn1 keyGenerate(output(surrogate as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"surrogateKey1 derive(created_date = currentDate(),",
				"          Created_by = \"I2025_PMahendi\",",
				"          Quality_check = iif({Product Quality}<6, 'Bad', 'Good'),",
				"          {bus_iss } = {Ease of doing business}*{Issue Resolution}) ~> derivedColumn2",
				"select1 derive(ttt = ERROR_FUNCTION(''),",
				"          column1 = ERROR_FUNCTION('')) ~> derivedColumn3",
				"derivedColumn2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Prop_0 as string,",
				"          match_id as string,",
				"          date as string,",
				"          match_type as string,",
				"          event_name as string,",
				"          innings as string,",
				"          batting_team as string,",
				"          bowling_team as string,",
				"          over as string,",
				"          ball as string,",
				"          ball_no as string,",
				"          batter as string,",
				"          bat_pos as string,",
				"          runs_batter as string,",
				"          balls_faced as string,",
				"          bowler as string,",
				"          valid_ball as string,",
				"          runs_extras as string,",
				"          runs_total as string,",
				"          runs_bowler as string,",
				"          runs_not_boundary as string,",
				"          extra_type as string,",
				"          non_striker as string,",
				"          non_striker_pos as string,",
				"          wicket_kind as string,",
				"          player_out as string,",
				"          fielders as string,",
				"          runs_target as string,",
				"          review_batter as string,",
				"          team_reviewed as string,",
				"          review_decision as string,",
				"          umpire as string,",
				"          umpires_call as string,",
				"          player_of_match as string,",
				"          match_won_by as string,",
				"          win_outcome as string,",
				"          toss_winner as string,",
				"          toss_decision as string,",
				"          venue as string,",
				"          city as string,",
				"          day as string,",
				"          month as string,",
				"          year as string,",
				"          season as string,",
				"          gender as string,",
				"          team_type as string,",
				"          superover_winner as string,",
				"          result_type as string,",
				"          method as string,",
				"          balls_per_over as string,",
				"          overs as string,",
				"          event_match_no as string,",
				"          stage as string,",
				"          match_number as string,",
				"          team_runs as string,",
				"          team_balls as string,",
				"          team_wicket as string,",
				"          new_batter as string,",
				"          batter_runs as string,",
				"          batter_balls as string,",
				"          bowler_wicket as string,",
				"          batting_partners as string,",
				"          next_batter as string,",
				"          striker_out as string",
				"     ),",
				"     partitionFileNames:['selected_columns'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}