{
	"name": "DF_for_scd_two",
	"properties": {
		"folder": {
			"name": "SCD"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_CSV_test",
						"type": "DatasetReference"
					},
					"name": "UpdatedSource"
				},
				{
					"dataset": {
						"referenceName": "DS_CSV_test",
						"type": "DatasetReference"
					},
					"name": "TargetSource"
				},
				{
					"dataset": {
						"referenceName": "DS_CSV_test",
						"type": "DatasetReference"
					},
					"name": "UpdatedSrc1",
					"description": "Import data from DS_CSV_test"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_CSV_test",
						"type": "DatasetReference"
					},
					"name": "finSink"
				}
			],
			"transformations": [
				{
					"name": "LeftJoinSrcOnTgt"
				},
				{
					"name": "ConditionalSplit"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "selectingSrcColsAndRenamingAsTgtCols"
				},
				{
					"name": "SelectRemaining"
				},
				{
					"name": "selectupdatedone"
				},
				{
					"name": "CombineAll3Src"
				},
				{
					"name": "leftSrcOnTgt"
				},
				{
					"name": "filter1"
				},
				{
					"name": "SelelectExisting"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "innerJoin"
				},
				{
					"name": "selectNothing"
				},
				{
					"name": "selectMaxVersCols"
				},
				{
					"name": "IncrementVersions"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmployeeID as short,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as string,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as integer,",
				"          HireDate as string,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as string,",
				"          EndDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> UpdatedSource",
				"source(output(",
				"          EmployeeID as short,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as string,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as integer,",
				"          HireDate as string,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as string,",
				"          EndDate as string,",
				"          version as integer,",
				"          created_by as string,",
				"          created_at as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> TargetSource",
				"source(output(",
				"          EmployeeID as short,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as string,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as integer,",
				"          HireDate as string,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as string,",
				"          EndDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> UpdatedSrc1",
				"UpdatedSource, TargetSource join(UpdatedSource@EmployeeID == TargetSource@EmployeeID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> LeftJoinSrcOnTgt",
				"LeftJoinSrcOnTgt split(isNull(TargetSource@EmployeeID),",
				"     (UpdatedSource@EmployeeID == TargetSource@EmployeeID) && (\r",
				"    TargetSource@Department != UpdatedSource@Department \r",
				"    || UpdatedSource@JobTitle != TargetSource@JobTitle \r",
				"    || TargetSource@Salary != UpdatedSource@Salary \r",
				"    || UpdatedSource@MaritalStatus != TargetSource@MaritalStatus\r",
				"    || TargetSource@EndDate != UpdatedSource@EndDate\r",
				"),",
				"     disjoint: false) ~> ConditionalSplit@(Insert, updated, remaining)",
				"selectingSrcColsAndRenamingAsTgtCols derive(version = 0,",
				"          created_by = 'I2025_JSenthil',",
				"          created_at = toString(currentDate())) ~> derivedColumn1",
				"ConditionalSplit@Insert select(mapColumn(",
				"          EmployeeID = ConditionalSplit@Insert@EmployeeID,",
				"          Name = ConditionalSplit@Insert@Name,",
				"          Gender = ConditionalSplit@Insert@Gender,",
				"          DateOfBirth = ConditionalSplit@Insert@DateOfBirth,",
				"          Department = ConditionalSplit@Insert@Department,",
				"          JobTitle = ConditionalSplit@Insert@JobTitle,",
				"          Salary = ConditionalSplit@Insert@Salary,",
				"          HireDate = ConditionalSplit@Insert@HireDate,",
				"          Address = ConditionalSplit@Insert@Address,",
				"          Email = ConditionalSplit@Insert@Email,",
				"          PhoneNumber = ConditionalSplit@Insert@PhoneNumber,",
				"          MaritalStatus = ConditionalSplit@Insert@MaritalStatus,",
				"          EffectiveDate = ConditionalSplit@Insert@EffectiveDate,",
				"          EndDate = ConditionalSplit@Insert@EndDate,",
				"          version,",
				"          created_by,",
				"          created_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectingSrcColsAndRenamingAsTgtCols",
				"ConditionalSplit@remaining select(mapColumn(",
				"          EmployeeID = ConditionalSplit@remaining@EmployeeID,",
				"          Name = ConditionalSplit@remaining@Name,",
				"          Gender = ConditionalSplit@remaining@Gender,",
				"          DateOfBirth = ConditionalSplit@remaining@DateOfBirth,",
				"          Department = ConditionalSplit@remaining@Department,",
				"          JobTitle = ConditionalSplit@remaining@JobTitle,",
				"          Salary = ConditionalSplit@remaining@Salary,",
				"          HireDate = ConditionalSplit@remaining@HireDate,",
				"          Address = ConditionalSplit@remaining@Address,",
				"          Email = ConditionalSplit@remaining@Email,",
				"          PhoneNumber = ConditionalSplit@remaining@PhoneNumber,",
				"          MaritalStatus = ConditionalSplit@remaining@MaritalStatus,",
				"          EffectiveDate = ConditionalSplit@remaining@EffectiveDate,",
				"          EndDate = ConditionalSplit@remaining@EndDate,",
				"          EmployeeID = ConditionalSplit@remaining@EmployeeID,",
				"          Name = ConditionalSplit@remaining@Name,",
				"          Gender = ConditionalSplit@remaining@Gender,",
				"          DateOfBirth = ConditionalSplit@remaining@DateOfBirth,",
				"          Department = ConditionalSplit@remaining@Department,",
				"          JobTitle = ConditionalSplit@remaining@JobTitle,",
				"          Salary = ConditionalSplit@remaining@Salary,",
				"          HireDate = ConditionalSplit@remaining@HireDate,",
				"          Address = ConditionalSplit@remaining@Address,",
				"          Email = ConditionalSplit@remaining@Email,",
				"          PhoneNumber = ConditionalSplit@remaining@PhoneNumber,",
				"          MaritalStatus = ConditionalSplit@remaining@MaritalStatus,",
				"          EffectiveDate = ConditionalSplit@remaining@EffectiveDate,",
				"          EndDate = ConditionalSplit@remaining@EndDate,",
				"          version,",
				"          created_by,",
				"          created_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRemaining",
				"ConditionalSplit@updated select(mapColumn(",
				"          EmployeeID = ConditionalSplit@updated@EmployeeID,",
				"          Name = ConditionalSplit@updated@Name,",
				"          Gender = ConditionalSplit@updated@Gender,",
				"          DateOfBirth = ConditionalSplit@updated@DateOfBirth,",
				"          Department = ConditionalSplit@updated@Department,",
				"          JobTitle = ConditionalSplit@updated@JobTitle,",
				"          Salary = ConditionalSplit@updated@Salary,",
				"          HireDate = ConditionalSplit@updated@HireDate,",
				"          Address = ConditionalSplit@updated@Address,",
				"          Email = ConditionalSplit@updated@Email,",
				"          PhoneNumber = ConditionalSplit@updated@PhoneNumber,",
				"          MaritalStatus = ConditionalSplit@updated@MaritalStatus,",
				"          EffectiveDate = ConditionalSplit@updated@EffectiveDate,",
				"          EndDate = ConditionalSplit@updated@EndDate,",
				"          EmployeeID = ConditionalSplit@updated@EmployeeID,",
				"          Name = ConditionalSplit@updated@Name,",
				"          Gender = ConditionalSplit@updated@Gender,",
				"          DateOfBirth = ConditionalSplit@updated@DateOfBirth,",
				"          Department = ConditionalSplit@updated@Department,",
				"          JobTitle = ConditionalSplit@updated@JobTitle,",
				"          Salary = ConditionalSplit@updated@Salary,",
				"          HireDate = ConditionalSplit@updated@HireDate,",
				"          Address = ConditionalSplit@updated@Address,",
				"          Email = ConditionalSplit@updated@Email,",
				"          PhoneNumber = ConditionalSplit@updated@PhoneNumber,",
				"          MaritalStatus = ConditionalSplit@updated@MaritalStatus,",
				"          EffectiveDate = ConditionalSplit@updated@EffectiveDate,",
				"          EndDate = ConditionalSplit@updated@EndDate,",
				"          version,",
				"          created_by,",
				"          created_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectupdatedone",
				"derivedColumn1, IncrementVersions, SelectRemaining, SelelectExisting union(byName: true)~> CombineAll3Src",
				"UpdatedSrc1, TargetSource join(UpdatedSrc1@EmployeeID == TargetSource@EmployeeID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> leftSrcOnTgt",
				"leftSrcOnTgt filter((UpdatedSrc1@EmployeeID == TargetSource@EmployeeID) && (    \r",
				"    TargetSource@Department != UpdatedSrc1@Department     \r",
				"    || UpdatedSrc1@JobTitle != TargetSource@JobTitle     \r",
				"    || TargetSource@Salary != UpdatedSrc1@Salary     \r",
				"    || UpdatedSrc1@MaritalStatus != TargetSource@MaritalStatus    \r",
				"    || TargetSource@EndDate != UpdatedSrc1@EndDate\r",
				")) ~> filter1",
				"filter1 select(mapColumn(",
				"          EmployeeID = TargetSource@EmployeeID,",
				"          Name = TargetSource@Name,",
				"          Gender = TargetSource@Gender,",
				"          DateOfBirth = TargetSource@DateOfBirth,",
				"          Department = TargetSource@Department,",
				"          JobTitle = TargetSource@JobTitle,",
				"          Salary = TargetSource@Salary,",
				"          HireDate = TargetSource@HireDate,",
				"          Address = TargetSource@Address,",
				"          Email = TargetSource@Email,",
				"          PhoneNumber = TargetSource@PhoneNumber,",
				"          MaritalStatus = TargetSource@MaritalStatus,",
				"          EffectiveDate = TargetSource@EffectiveDate,",
				"          EndDate = TargetSource@EndDate,",
				"          version,",
				"          created_by,",
				"          created_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelelectExisting",
				"selectupdatedone aggregate(groupBy(EmployeeID),",
				"     version = max(version)) ~> aggregate1",
				"aggregate1, selectNothing join(aggregate1@EmployeeID == selectNothing@EmployeeID",
				"     && aggregate1@version == selectNothing@version,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> innerJoin",
				"selectupdatedone select(mapColumn(",
				"          EmployeeID,",
				"          Name,",
				"          Gender,",
				"          DateOfBirth,",
				"          Department,",
				"          JobTitle,",
				"          Salary,",
				"          HireDate,",
				"          Address,",
				"          Email,",
				"          PhoneNumber,",
				"          MaritalStatus,",
				"          EffectiveDate,",
				"          EndDate,",
				"          version,",
				"          created_by,",
				"          created_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectNothing",
				"innerJoin select(mapColumn(",
				"          EmployeeID = selectNothing@EmployeeID,",
				"          Name,",
				"          Gender,",
				"          DateOfBirth,",
				"          Department,",
				"          JobTitle,",
				"          Salary,",
				"          HireDate,",
				"          Address,",
				"          Email,",
				"          PhoneNumber,",
				"          MaritalStatus,",
				"          EffectiveDate,",
				"          EndDate,",
				"          version = selectNothing@version,",
				"          created_by,",
				"          created_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectMaxVersCols",
				"selectMaxVersCols derive(version = version + 1) ~> IncrementVersions",
				"CombineAll3Src sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['DIM_scd2_target_employees_v1.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> finSink"
			]
		}
	}
}