{
	"name": "DF_src_phrmcy_nullhandle",
	"properties": {
		"folder": {
			"name": "Day 9_Training_I2025_SRangan1"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "srcPhrmcy"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Source_I2025_SRangan1",
						"type": "DatasetReference"
					},
					"name": "SNKPhrmcy"
				}
			],
			"transformations": [
				{
					"name": "DCTypecast"
				},
				{
					"name": "DCnullHandle"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PHRMCY_NAT_PROV_ID_NBR as string,",
				"          PHRMCY_NCPDP_NBR as string,",
				"          PTNT_CD as string,",
				"          PSCB_FIRST_NM as string,",
				"          PSCB_LAST_NM as string,",
				"          LANG_CD as string,",
				"          DEAL_ID as string,",
				"          PHRMCY_NM as string,",
				"          PHRMCY_ST_ADDR_LINE1_TXT as string,",
				"          PHRMCY_ADDR_ZIP_CD as string,",
				"          PHRMCY_ADDR_CITY_NM as string,",
				"          PHRMCY_ADDR_ST_CD as string,",
				"          PHRMCY_ADDR_ST_NAME as string,",
				"          PHRMCY_ADDR_ZNE_CD as string,",
				"          PHRMCY_ADDR_ZNE_NM as string,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> srcPhrmcy",
				"srcPhrmcy derive(PHRMCY_NCPDP_NBR = toInteger(PHRMCY_NCPDP_NBR),",
				"          PHRMCY_ADDR_ZIP_CD = toInteger(PHRMCY_ADDR_ZIP_CD),",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT = toTimestamp(PHRMCY_SYS_IVR_DTA_STRT_DT, 'dd-MM-yyyy', 'HH:mm'),",
				"          PHRMCY_NAT_PROV_ID_NBR = toInteger(PHRMCY_NAT_PROV_ID_NBR)) ~> DCTypecast",
				"DCTypecast derive(each(match(type=='string'), $$ = iif(isNull($$), 'UNK', $$)),",
				"          each(match(type=='timestamp'), $$ = iif(isNull($$), toTimestamp('2999-12-31 00:00:00.000'), $$)),",
				"          each(match(type=='integer'), $$ = iif(isNull($$), -1, $$))) ~> DCnullHandle",
				"DCnullHandle sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          ProductID as string,",
				"          Name as string,",
				"          ProductNumber as string,",
				"          MakeFlag as string,",
				"          FinishedGoodsFlag as string,",
				"          Color as string,",
				"          SafetyStockLevel as string,",
				"          ReorderPoint as string,",
				"          StandardCost as string,",
				"          ListPrice as string,",
				"          Size as string,",
				"          SizeUnitMeasureCode as string,",
				"          WeightUnitMeasureCode as string,",
				"          Weight as string,",
				"          DaysToManufacture as string,",
				"          ProductLine as string,",
				"          Class as string,",
				"          Style as string,",
				"          ProductSubcategoryID as string,",
				"          ProductModelID as string,",
				"          SellStartDate as string,",
				"          SellEndDate as string,",
				"          DiscontinuedDate as string,",
				"          rowguid as string,",
				"          ModifiedDate as string",
				"     ),",
				"     partitionFileNames:['src.phrmcy.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> SNKPhrmcy"
			]
		}
	}
}