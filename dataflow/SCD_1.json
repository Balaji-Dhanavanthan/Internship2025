{
	"name": "SCD_1",
	"properties": {
		"folder": {
			"name": "TDSG_ADF_DataFlow"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "target"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "sourceselect1"
				},
				{
					"name": "join1"
				},
				{
					"name": "split"
				},
				{
					"name": "update1"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmployeeID as short,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as string,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as integer,",
				"          HireDate as string,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as date,",
				"          EndDate as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          EmployeeID as short,",
				"          Name as string,",
				"          Gender as string,",
				"          DateOfBirth as date,",
				"          Department as string,",
				"          JobTitle as string,",
				"          Salary as integer,",
				"          HireDate as date,",
				"          Address as string,",
				"          Email as string,",
				"          PhoneNumber as string,",
				"          MaritalStatus as string,",
				"          EffectiveDate as date,",
				"          EndDate as string,",
				"          created_by as string,",
				"          created_at as date,",
				"          modified_by as string,",
				"          modified_at as date",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> target",
				"source1 select(mapColumn(",
				"          each(match(/* All input columns */ true()),",
				"               /* Input name */ $$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sourceselect1",
				"sourceselect1, target join(sourceselect1@EmployeeID == target@EmployeeID,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 split(isNull(target@EmployeeID),",
				"     disjoint: false) ~> split@(Insert, Update1)",
				"split@Update1 alterRow(updateIf((split@Update1@EmployeeID==split@Update1@EmployeeID) && ((split@Update1@Department!=split@Update1@Department)||(split@Update1@JobTitle!=split@Update1@JobTitle)||(split@Update1@Salary!=split@Update1@Salary)||(split@Update1@PhoneNumber!=split@Update1@PhoneNumber)||(split@Update1@MaritalStatus!=split@Update1@MaritalStatus)))) ~> update1",
				"split@Insert select(mapColumn(",
				"          EmployeeID = split@Insert@EmployeeID,",
				"          Name = split@Insert@Name,",
				"          Gender = split@Insert@Gender,",
				"          DateOfBirth = split@Insert@DateOfBirth,",
				"          Department = split@Insert@Department,",
				"          JobTitle = split@Insert@JobTitle,",
				"          Salary = split@Insert@Salary,",
				"          HireDate = split@Insert@HireDate,",
				"          Address = split@Insert@Address,",
				"          Email = split@Insert@Email,",
				"          PhoneNumber = split@Insert@PhoneNumber,",
				"          MaritalStatus = split@Insert@MaritalStatus,",
				"          EffectiveDate = split@Insert@EffectiveDate,",
				"          EndDate = split@Insert@EndDate,",
				"          EmployeeID = split@Insert@EmployeeID,",
				"          Name = split@Insert@Name,",
				"          Gender = split@Insert@Gender,",
				"          DateOfBirth = split@Insert@DateOfBirth,",
				"          Department = split@Insert@Department,",
				"          JobTitle = split@Insert@JobTitle,",
				"          Salary = split@Insert@Salary,",
				"          HireDate = split@Insert@HireDate,",
				"          Address = split@Insert@Address,",
				"          Email = split@Insert@Email,",
				"          PhoneNumber = split@Insert@PhoneNumber,",
				"          MaritalStatus = split@Insert@MaritalStatus,",
				"          EffectiveDate = split@Insert@EffectiveDate,",
				"          EndDate = split@Insert@EndDate,",
				"          created_by,",
				"          created_at,",
				"          modified_by,",
				"          modified_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"update1 select(mapColumn(",
				"          EmployeeID = split@Update1@EmployeeID,",
				"          Name = split@Update1@Name,",
				"          Gender = split@Update1@Gender,",
				"          DateOfBirth = split@Update1@DateOfBirth,",
				"          Department = split@Update1@Department,",
				"          JobTitle = split@Update1@JobTitle,",
				"          Salary = split@Update1@Salary,",
				"          HireDate = split@Update1@HireDate,",
				"          Address = split@Update1@Address,",
				"          Email = split@Update1@Email,",
				"          PhoneNumber = split@Update1@PhoneNumber,",
				"          MaritalStatus = split@Update1@MaritalStatus,",
				"          EffectiveDate = split@Update1@EffectiveDate,",
				"          EndDate = split@Update1@EndDate,",
				"          EmployeeID = split@Update1@EmployeeID,",
				"          Name = split@Update1@Name,",
				"          Gender = split@Update1@Gender,",
				"          DateOfBirth = split@Update1@DateOfBirth,",
				"          Department = split@Update1@Department,",
				"          JobTitle = split@Update1@JobTitle,",
				"          Salary = split@Update1@Salary,",
				"          HireDate = split@Update1@HireDate,",
				"          Address = split@Update1@Address,",
				"          Email = split@Update1@Email,",
				"          PhoneNumber = split@Update1@PhoneNumber,",
				"          MaritalStatus = split@Update1@MaritalStatus,",
				"          EffectiveDate = split@Update1@EffectiveDate,",
				"          EndDate = split@Update1@EndDate,",
				"          created_by,",
				"          created_at,",
				"          modified_by,",
				"          modified_at",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1 derive(modified_by = 'I2025_MSyed',",
				"          modified_at = currentDate()) ~> derivedColumn1",
				"derivedColumn1, select2 union(byName: true)~> union1",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Prop_0 as string,",
				"          match_id as string,",
				"          date as string,",
				"          match_type as string,",
				"          event_name as string,",
				"          innings as string,",
				"          batting_team as string,",
				"          bowling_team as string,",
				"          over as string,",
				"          ball as string,",
				"          ball_no as string,",
				"          batter as string,",
				"          bat_pos as string,",
				"          runs_batter as string,",
				"          balls_faced as string,",
				"          bowler as string,",
				"          valid_ball as string,",
				"          runs_extras as string,",
				"          runs_total as string,",
				"          runs_bowler as string,",
				"          runs_not_boundary as string,",
				"          extra_type as string,",
				"          non_striker as string,",
				"          non_striker_pos as string,",
				"          wicket_kind as string,",
				"          player_out as string,",
				"          fielders as string,",
				"          runs_target as string,",
				"          review_batter as string,",
				"          team_reviewed as string,",
				"          review_decision as string,",
				"          umpire as string,",
				"          umpires_call as string,",
				"          player_of_match as string,",
				"          match_won_by as string,",
				"          win_outcome as string,",
				"          toss_winner as string,",
				"          toss_decision as string,",
				"          venue as string,",
				"          city as string,",
				"          day as string,",
				"          month as string,",
				"          year as string,",
				"          season as string,",
				"          gender as string,",
				"          team_type as string,",
				"          superover_winner as string,",
				"          result_type as string,",
				"          method as string,",
				"          balls_per_over as string,",
				"          overs as string,",
				"          event_match_no as string,",
				"          stage as string,",
				"          match_number as string,",
				"          team_runs as string,",
				"          team_balls as string,",
				"          team_wicket as string,",
				"          new_batter as string,",
				"          batter_runs as string,",
				"          batter_balls as string,",
				"          bowler_wicket as string,",
				"          batting_partners as string,",
				"          next_batter as string,",
				"          striker_out as string",
				"     ),",
				"     partitionFileNames:['SCD2TargetData.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}