{
	"name": "DF_ADF_test1_I2025_RRamesh",
	"properties": {
		"folder": {
			"name": "ADF_module_test1_I2025_RRamesh"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_blob_r",
						"type": "DatasetReference"
					},
					"name": "source1",
					"description": "Import data from q1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_blob_r",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          anime_id as integer,",
				"          name as string,",
				"          genre as string,",
				"          type as string,",
				"          episodes as string,",
				"          rating as double,",
				"          members as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     rowUrlColumn: 'FileName') ~> source1",
				"source1 derive(each(match(type=='string'), $$ = iifNull($$,'UNKNOWN',$$)),",
				"          each(match(type=='integer'), $$ = iifNull($$,0,$$)),",
				"          each(match(type=='double'), $$ = iifNull($$,0.0,$$)),",
				"          created_at = currentDate(),",
				"          created_by = \"I2025_RRamesh\",",
				"          genre_new = replace(genre,',',':'),",
				"          rating_new = round(rating,1),",
				"          type_OVA = iif(type=='OVA',replace(type,'OVA','Original video animation'),type),",
				"          type_ONA = iif(type=='ONA',replace(type,'ONA','Original Net Animation'),type),",
				"          type_TV = iif(type=='TV',replace(type, 'TV','Television'),type),",
				"          type_Movie = iif(type=='Movie',replace(type,'Movie','Cinema'),type)) ~> derivedColumn1",
				"derivedColumn1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['test1-tgt-Q1.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}