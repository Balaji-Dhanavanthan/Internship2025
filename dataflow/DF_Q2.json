{
	"name": "DF_Q2",
	"properties": {
		"folder": {
			"name": "ADF-Module test 1-I2025_MAbdul1"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "CSV_adf_Q2",
						"type": "DatasetReference"
					},
					"name": "rawanime1"
				},
				{
					"dataset": {
						"referenceName": "CSV_adf_Q2",
						"type": "DatasetReference"
					},
					"name": "rawanime2"
				},
				{
					"dataset": {
						"referenceName": "CSV_adf_Q2",
						"type": "DatasetReference"
					},
					"name": "rawanime3"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_adftest_Q1",
						"type": "DatasetReference"
					},
					"name": "sink",
					"rejectedDataLinkedService": {
						"referenceName": "DS_Blob_storgare",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "joiningall"
				}
			],
			"scriptLines": [
				"source(output(",
				"          anime_id as integer,",
				"          name as string,",
				"          genre as string,",
				"          type as string,",
				"          episodes as string,",
				"          rating as double,",
				"          members as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> rawanime1",
				"source(output(",
				"          anime_id as integer,",
				"          name as string,",
				"          genre as string,",
				"          type as string,",
				"          episodes as string,",
				"          rating as double,",
				"          members as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> rawanime2",
				"source(output(",
				"          anime_id as integer,",
				"          name as string,",
				"          genre as string,",
				"          type as string,",
				"          episodes as string,",
				"          rating as double,",
				"          members as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> rawanime3",
				"rawanime1, rawanime2, rawanime3 union(byName: true)~> joiningall",
				"joiningall sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['TGT_Raw_Anime_I2025_MAbdul'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink"
			]
		}
	}
}