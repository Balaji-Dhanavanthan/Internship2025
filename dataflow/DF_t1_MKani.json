{
	"name": "DF_t1_MKani",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "source"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "split1"
				},
				{
					"name": "sourceselect"
				},
				{
					"name": "targetselect2"
				},
				{
					"name": "select3"
				},
				{
					"name": "select4"
				},
				{
					"name": "union1"
				},
				{
					"name": "union2"
				},
				{
					"name": "sourcesur"
				},
				{
					"name": "NullHandling"
				},
				{
					"name": "derived"
				},
				{
					"name": "transform"
				}
			],
			"scriptLines": [
				"source(output(",
				"          anime_id as integer,",
				"          name as string,",
				"          genre as string,",
				"          type as string,",
				"          episodes as string,",
				"          rating as double,",
				"          members as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source",
				"NullHandling split((anime_id_src==a) && (rating_src!=rating_tgt),",
				"     isNull(anime_id_tg),",
				"     disjoint: false) ~> split1@(update, insert, exist)",
				"source select(mapColumn(",
				"          anime_id_src = anime_id,",
				"          name_src = name,",
				"          genre_src = genre,",
				"          type_src = type,",
				"          episodes_src = episodes,",
				"          rating_src = rating,",
				"          members_src = members",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sourceselect",
				"split1@update select(mapColumn(",
				"          anime_id_tgt = anime_id_src,",
				"          name_tgt = name_src,",
				"          genre_tgt = genre_src,",
				"          type_tgt = type_src,",
				"          episodes_tgt = episodes_src,",
				"          rating_tgt = rating_src,",
				"          members_tgt = members_src",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> targetselect2",
				"split1@insert select(mapColumn(",
				"          anime_id_src,",
				"          name_src,",
				"          genre_src,",
				"          type_src,",
				"          episodes_src,",
				"          rating_src,",
				"          members_src,",
				"          anime",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"split1@exist select(mapColumn(",
				"          anime_id_src,",
				"          name_src,",
				"          genre_src,",
				"          type_src,",
				"          episodes_src,",
				"          rating_src,",
				"          members_src,",
				"          anime",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"derived, select3 union(byName: true)~> union1",
				"union1, select4 union(byName: true)~> union2",
				"sourceselect keyGenerate(output(anime as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> sourcesur",
				"transform@split derive(each(match(type=='string'), $$ = iifNull($$, 'UNK', $$)),",
				"          each(match(type=='float'), $$ = iifNull($$, 0.0, $$)),",
				"          each(match(type=='int'), $$ = iifNull($$, 0, $$)),",
				"          each(match(type=='date'), $$ = iifNull($$, '1900-01-01', $$))) ~> NullHandling",
				"targetselect2 derive(CreatedBy = 'Muthukani ModuleTest1',",
				"          CreatedDate = currentDate(),",
				"          UpdatedDate = currentDate()) ~> derived",
				"sourceselect split(ERROR_FUNCTION('regexSplit(__SINGLE_QUOTE__Original video animation__SINGLE_QUOTE__)[0],1+left(__SINGLE_QUOTE__Original video animation__SINGLE_QUOTE__)+[0],2)+left(__SINGLE_QUOTE__Original video animation__SINGLE_QUOTE__)[0],3) && __NEW_LINE_R____NEW_LINE_N__regexSplit(__SINGLE_QUOTE__Original Net Animation__SINGLE_QUOTE__)[0],1+left(__SINGLE_QUOTE__Original video animation__SINGLE_QUOTE__)+[0],2)+left(__SINGLE_QUOTE__Original video animation__SINGLE_QUOTE__)[0],3) &&__NEW_LINE_R____NEW_LINE_N__regexSplit(Cinema else Type )'),",
				"     disjoint: false) ~> transform@(split)",
				"union2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Prop_0 as string,",
				"          match_id as string,",
				"          date as string,",
				"          match_type as string,",
				"          event_name as string,",
				"          innings as string,",
				"          batting_team as string,",
				"          bowling_team as string,",
				"          over as string,",
				"          ball as string,",
				"          ball_no as string,",
				"          batter as string,",
				"          bat_pos as string,",
				"          runs_batter as string,",
				"          balls_faced as string,",
				"          bowler as string,",
				"          valid_ball as string,",
				"          runs_extras as string,",
				"          runs_total as string,",
				"          runs_bowler as string,",
				"          runs_not_boundary as string,",
				"          extra_type as string,",
				"          non_striker as string,",
				"          non_striker_pos as string,",
				"          wicket_kind as string,",
				"          player_out as string,",
				"          fielders as string,",
				"          runs_target as string,",
				"          review_batter as string,",
				"          team_reviewed as string,",
				"          review_decision as string,",
				"          umpire as string,",
				"          umpires_call as string,",
				"          player_of_match as string,",
				"          match_won_by as string,",
				"          win_outcome as string,",
				"          toss_winner as string,",
				"          toss_decision as string,",
				"          venue as string,",
				"          city as string,",
				"          day as string,",
				"          month as string,",
				"          year as string,",
				"          season as string,",
				"          gender as string,",
				"          team_type as string,",
				"          superover_winner as string,",
				"          result_type as string,",
				"          method as string,",
				"          balls_per_over as string,",
				"          overs as string,",
				"          event_match_no as string,",
				"          stage as string,",
				"          match_number as string,",
				"          team_runs as string,",
				"          team_balls as string,",
				"          team_wicket as string,",
				"          new_batter as string,",
				"          batter_runs as string,",
				"          batter_balls as string,",
				"          bowler_wicket as string,",
				"          batting_partners as string,",
				"          next_batter as string,",
				"          striker_out as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}