{
	"name": "DF_STTM_FACT",
	"properties": {
		"folder": {
			"name": "Day 9_Training_I2025_SRangan1"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_new_I2025SRangan1",
						"type": "DatasetReference"
					},
					"name": "SrcPTNT"
				},
				{
					"dataset": {
						"referenceName": "DS_Blob",
						"type": "DatasetReference"
					},
					"name": "SrcPhrmcy"
				},
				{
					"dataset": {
						"referenceName": "DS_STTM_I2025_SRangan1",
						"type": "DatasetReference"
					},
					"name": "SrcYear"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "DCnulltoString"
				},
				{
					"name": "DCTypeCast"
				},
				{
					"name": "PhrmcyName"
				},
				{
					"name": "NamingYear"
				},
				{
					"name": "PTNTName"
				},
				{
					"name": "LeftJoinPTNTPhrmcy"
				},
				{
					"name": "filterIsNull"
				},
				{
					"name": "DCNultoString"
				},
				{
					"name": "DCNullTooString"
				},
				{
					"name": "EmptyValuesToNull"
				},
				{
					"name": "LeftJoinPTNTYear"
				},
				{
					"name": "DCTransformations"
				},
				{
					"name": "DCToInt"
				},
				{
					"name": "AggAvg"
				},
				{
					"name": "AggMax"
				},
				{
					"name": "DCDctAmt"
				},
				{
					"name": "selectTarget"
				},
				{
					"name": "TgtNullHandle"
				}
			],
			"scriptLines": [
				"source(output(",
				"          DOC_ID as string,",
				"          DOC_VER as string,",
				"          SFTWR_VENDR as string,",
				"          PHRMCY_NCPDP_ID as string,",
				"          PHRMCY_NAT_PROV_ID_NBR as string,",
				"          PTNT_CD as string,",
				"          PTNT_YR_OF_BRTH as string,",
				"          PTNT_GNDR as string,",
				"          PTNT_ZIP_CD as string,",
				"          PTNT_LANG_CD as string,",
				"          PTNT_LOC_CD as string,",
				"          NURSING_HOME_FAC_NM as string,",
				"          RX_ENROLL_IN_AUTOFILL as string,",
				"          RX_ENROLL_IN_RFIL as string,",
				"          RX_ENROLL_IN_CNTR_FILL as string,",
				"          PSCB_NPI as string,",
				"          PSCB_DEA_ID as string,",
				"          PSCB_ST_LIC_ID as string,",
				"          PSCB_LAST_NM as string,",
				"          PSCB_FIRST_NM as string,",
				"          OUT_PSCB_ZIP_CD as string,",
				"          RX_NBR as string,",
				"          TRANS_NBR as string,",
				"          RX_TYP as string,",
				"          DT_WRT as string,",
				"          DT_FILL as string,",
				"          TM_FILL as string,",
				"          OUT_MTRC_DSPN_QTY as string,",
				"          DAY_SPLY as string,",
				"          FILL_NBR as string,",
				"          RFIL_ORIGLY_AUTH as string,",
				"          RFIL_RMN as string,",
				"          DAW_CD as string,",
				"          OUT_INV_QTY_AFT_FILL as string,",
				"          PRC_OVRD as string,",
				"          DLV as string,",
				"          CMPND_IND as string,",
				"          PROD_ID as string,",
				"          RX_ORIG_IND as string,",
				"          PMT_TYP as string,",
				"          BAS_OF_INGRD_CST_REIMB as string,",
				"          REIMB_AMT as string,",
				"          COPAY_AMT as string,",
				"          INGRD_CST_AMT as string,",
				"          OUT_TOT_AMT_PD_BY_PTNT as string,",
				"          TOT_RX_PRC_COLL as string,",
				"          OUT_DSPN_FEE_PD as string,",
				"          COGS_AMT as string,",
				"          USUAL_AND_CSTMARY as string,",
				"          OUT_AWP_AMT as string,",
				"          OUT_DCT_AMT as string,",
				"          OUT_SLS_TAX as string,",
				"          PTY3_BIN as string,",
				"          PTY3_PCN as string,",
				"          PLN_ID as string,",
				"          GRP_ID as string,",
				"          NTWK_REIMB_ID as string,",
				"          PAYR_ID_QLFY as string,",
				"          PAYR_ID as string,",
				"          PTY3_CLM_REF_ID as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SrcPTNT",
				"source(output(",
				"          PHRMCY_NAT_PROV_ID_NBR as string,",
				"          PHRMCY_NCPDP_NBR as string,",
				"          PTNT_CD as string,",
				"          PSCB_FIRST_NM as string,",
				"          PSCB_LAST_NM as string,",
				"          LANG_CD as string,",
				"          DEAL_ID as string,",
				"          PHRMCY_NM as string,",
				"          PHRMCY_ST_ADDR_LINE1_TXT as string,",
				"          PHRMCY_ADDR_ZIP_CD as string,",
				"          PHRMCY_ADDR_CITY_NM as string,",
				"          PHRMCY_ADDR_ST_CD as string,",
				"          PHRMCY_ADDR_ST_NAME as string,",
				"          PHRMCY_ADDR_ZNE_CD as string,",
				"          PHRMCY_ADDR_ZNE_NM as string,",
				"          PHRMCY_SYS_IVR_DTA_STRT_DT as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SrcPhrmcy",
				"source(output(",
				"          YEAR_ID as string,",
				"          YEAR_DESC as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> SrcYear",
				"SrcPTNT derive(each(match(type=='string'), $$ = case($$ == 'NULL', toString(null()), $$))) ~> DCnulltoString",
				"DCnulltoString derive(TRANS_NBR = toInteger(TRANS_NBR),",
				"          DT_WRT = toInteger(DT_WRT),",
				"          PMT_TYP = toInteger(PMT_TYP),",
				"          COGS_AMT = toDecimal(COGS_AMT, 12, 2),",
				"          REIMB_AMT = toDecimal(REIMB_AMT, 12, 2),",
				"          COPAY_AMT = toDecimal(COPAY_AMT, 12, 2),",
				"          INGRD_CST_AMT = toDecimal(INGRD_CST_AMT, 12, 2),",
				"          DT_FILL = toInteger(DT_FILL),",
				"          USUAL_AND_CSTMARY = toDecimal(USUAL_AND_CSTMARY, 12, 2)) ~> DCTypeCast",
				"DCNultoString select(mapColumn(",
				"          each(match(true()),",
				"               'p.'+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> PhrmcyName",
				"DCNullTooString select(mapColumn(",
				"          {y.YEAR_ID} = YEAR_ID,",
				"          {y.YEAR_DESC} = YEAR_DESC",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> NamingYear",
				"DCTypeCast select(mapColumn(",
				"          each(match(true()),",
				"               'pt.'+$$ = $$)",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> PTNTName",
				"PTNTName, PhrmcyName join({pt.PTNT_CD} == {p.PTNT_CD},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> LeftJoinPTNTPhrmcy",
				"EmptyValuesToNull filter(isNull({p.PHRMCY_NAT_PROV_ID_NBR})) ~> filterIsNull",
				"SrcPhrmcy derive(each(match(type=='string'), $$ = case($$ == 'NULL', toString(null()),$$ ))) ~> DCNultoString",
				"SrcYear derive(each(match(type=='string'), $$ = case($$ == 'NULL', toString(null()), $$))) ~> DCNullTooString",
				"LeftJoinPTNTYear derive(each(match(type=='string'), $$ = case(trim($$)=='',toString(null()),$$))) ~> EmptyValuesToNull",
				"LeftJoinPTNTPhrmcy, NamingYear join({pt.PTNT_YR_OF_BRTH} == {y.YEAR_ID},",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> LeftJoinPTNTYear",
				"DCToInt derive(TRANS_NBR = toInteger({pt.TRANS_NBR}),",
				"          PTNT_CD = substringIndex({p.PTNT_CD}, '_', -1),",
				"          PTNT_NM = regexReplace({p.PHRMCY_NM}, \"[,&'-]\", ' '),",
				"          PTNT_YR_OF_BRTH = {pt.PTNT_YR_OF_BRTH},",
				"          PTNT_AGE = toInteger(year(currentTimestamp())) - {pt.PTNT_YR_OF_BRTH},",
				"          PTNT_GNDR = iif({pt.PTNT_GNDR} == 'M', 'Male', iif({pt.PTNT_GNDR} == 'F', 'Female', 'UNK')),",
				"          TRANS_DATE = toDate({pt.DT_WRT}, 'yyyyMMdd'),",
				"          PROD_ID = {pt.PROD_ID},",
				"          PROD_GROUP_ID = left(trim({pt.GRP_ID}), 2)+right(trim({pt.GRP_ID}), 2),",
				"          PAYMENT_TYPE = iif({pt.PMT_TYP} == 1, 'On-Line', iif({pt.PMT_TYP} == 2, 'Cash', 'Others')),",
				"          COGS_AMT = {pt.COGS_AMT}/100,",
				"          REIMB_AMT = {pt.COGS_AMT} + {pt.REIMB_AMT},",
				"          {TOTAL_AMT(COL 3)} = {pt.COGS_AMT} * {pt.REIMB_AMT},",
				"          INGRD_CST_AMT = {pt.INGRD_CST_AMT}/100,",
				"          FILLED_DATE = toDate({pt.DT_FILL}, 'yyyyMMdd'),",
				"          PAYR_CNTRCT_FLG = iif({pt.TOT_RX_PRC_COLL} > {pt.USUAL_AND_CSTMARY}, 'Y', 'N'),",
				"          YEAR_DESC = right({y.YEAR_DESC}, 4),",
				"          LOAD_DATE = currentTimestamp()) ~> DCTransformations",
				"filterIsNull derive({pt.PTNT_YR_OF_BRTH} = toInteger({pt.PTNT_YR_OF_BRTH}),",
				"          {pt.DT_WRT} = toString({pt.DT_WRT}),",
				"          {pt.DT_FILL} = toString({pt.DT_FILL}),",
				"          {pt.USUAL_AND_CSTMARY} = toString({pt.USUAL_AND_CSTMARY})) ~> DCToInt",
				"DCTransformations window(over({pt.PROD_ID}),",
				"     asc({pt.PROD_ID}, true),",
				"     {PTNT_COPAY_AMT(COL1)} = avg({pt.COPAY_AMT})) ~> AggAvg",
				"AggAvg window(over({pt.PROD_ID}),",
				"     asc({pt.PROD_ID}, true),",
				"     {SLS_TAX_AMT(COL2)} = max({PTNT_COPAY_AMT(COL1)})) ~> AggMax",
				"AggMax derive(DCT_AMT = iif({PTNT_COPAY_AMT(COL1)} > 0 , ({PTNT_COPAY_AMT(COL1)}/{TOTAL_AMT(COL 3)}), {TOTAL_AMT(COL 3)}*0.2)) ~> DCDctAmt",
				"DCDctAmt select(mapColumn(",
				"          TRANS_NBR,",
				"          PTNT_CD,",
				"          PTNT_NM,",
				"          PTNT_YR_OF_BRTH,",
				"          PTNT_AGE,",
				"          PTNT_GNDR,",
				"          TRANS_DATE,",
				"          PROD_ID,",
				"          PROD_GROUP_ID,",
				"          PAYMENT_TYPE,",
				"          COGS_AMT,",
				"          REIMB_AMT,",
				"          PTNT_COPAY_AMT = {PTNT_COPAY_AMT(COL1)},",
				"          SLS_TAX_AMT = {SLS_TAX_AMT(COL2)},",
				"          TOTAL_AMT = {TOTAL_AMT(COL 3)},",
				"          DCT_AMT,",
				"          INGRD_CST_AMT,",
				"          FILLED_DATE,",
				"          PAYR_CNTRCT_FLG,",
				"          YEAR_DESC,",
				"          LOAD_DATE",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectTarget",
				"selectTarget derive(each(match(type=='string'), $$ = iifNull($$, 'UNk', $$)),",
				"          each(match(type=='Integer'), $$ = iifNull($#, -1, $#)),",
				"          COGS_AMT = iif(isNull(COGS_AMT), 0.00, toFloat(COGS_AMT)),",
				"          REIMB_AMT = iif(isNull(REIMB_AMT), 0.00, toFloat(REIMB_AMT)),",
				"          PTNT_COPAY_AMT = iif(isNull(PTNT_COPAY_AMT), 0.00,toFloat(PTNT_COPAY_AMT) ),",
				"          SLS_TAX_AMT = iif(isNull(SLS_TAX_AMT), 0.00,toFloat(SLS_TAX_AMT) ),",
				"          TOTAL_AMT = iif(isNull(TOTAL_AMT), 0.00,toFloat(TOTAL_AMT) ),",
				"          DCT_AMT = iif(isNull(DCT_AMT), 0.00,toFloat(DCT_AMT) ),",
				"          INGRD_CST_AMT = iif(isNull(INGRD_CST_AMT), 0.00,toFloat(INGRD_CST_AMT) )) ~> TgtNullHandle"
			]
		}
	}
}